<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ssh | Kevin Warrington]]></title>
  <link href="http://dubbs.github.io/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://dubbs.github.io/"/>
  <updated>2015-06-24T16:59:32-06:00</updated>
  <id>http://dubbs.github.io/</id>
  <author>
    <name><![CDATA[Kevin Warrington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Executing Drush Commands Outside of Vagrant Using Aliases]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/18/executing-drush-commands-outside-of-vagrant-using-aliases/"/>
    <updated>2014-09-18T11:17:42-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/18/executing-drush-commands-outside-of-vagrant-using-aliases</id>
    <content type="html"><![CDATA[<p>Drush aliases make it possible to run commands from outside your
vagrant box, and even outside of your project directory.</p>

<p>To start, you need a <code>~/.drush/dev.aliases.drushrc.php</code> file:</p>

<pre><code class="php                                                                         ">$aliases['project1'] = array(
    'root' =&gt; '/vagrant', 
    'remote-host' =&gt; '10.0.0.124', 
    'remote-user' =&gt; 'vagrant', 
); 
$aliases['project2'] = array( 
    'root' =&gt; '/vagrant', 
    'remote-host' =&gt; '10.0.0.125', 
    'remote-user' =&gt; 'vagrant', 
);
</code></pre>

<p>Next, you need to copy your public key to your vagrant box, the password
is <code>vagrant</code>:</p>

<pre><code class="bash">ssh-copy-id -i ~/.ssh/id_rsa.pub vagrant@10.0.0.124
</code></pre>

<p>And finally, test the connection:</p>

<pre><code class="bash">drush @project1 status
</code></pre>

<p>Drush will use your alias configuration to select the appropriate root directory and remote
host.  You should be able to run the above command from any directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Config and Agent Forwarding]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding/"/>
    <updated>2014-09-10T21:50:59-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding</id>
    <content type="html"><![CDATA[<p>Quick guide to setting up ssh config and agent forwarding.</p>

<h2>1. Setup remote server</h2>

<p>Enable authorized keys on remote, <code>/etc/sshd_config</code>:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile  .ssh/authorized_keys
</code></pre>

<h2>2. Setup client keys</h2>

<p>Generate an ssh key</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>Copy public key to remote server</p>

<pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub user@example.com
</code></pre>

<p>Test connection using private key</p>

<pre><code>ssh -i ~/.ssh/id_rsa user@example.com date
</code></pre>

<h2>3. Setup client config</h2>

<p>This allows for separate ssh configuration per host:</p>

<pre><code>touch ~/.ssh/config
chmod 600 ~/.ssh/config
</code></pre>

<p>Add the following to <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
HostName example.com
User user
PubkeyAuthentication yes
IdentityFile ~/.ssh/id_rsa
</code></pre>

<p>Test the connection:</p>

<pre><code>ssh remoteServer1 date
</code></pre>

<h2>4. Setup agent forwarding</h2>

<p><code>ssh-agent</code> is a user daemon which holds unencrypted ssh keys in memory.  Key
challenges are sent from a remote machine, through any intermediary servers
and back to your local machine.  This saves you from having to store your
private keys on remote servers.</p>

<p>Turn on agent forwarding for your host, <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
...
ForwardAgent yes
</code></pre>

<p>Verify ssh-agent is running:</p>

<pre><code>echo "$SSH_AUTH_SOCK"
</code></pre>

<p>Verify you have an identity loaded:</p>

<pre><code>ssh-add -L
</code></pre>

<p>If not, add an identity:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<p>Login, logout, login to remote, first login requires passphrase.
Subsequent logins do not:</p>

<pre><code>ssh remoteServer1
exit
ssh remoteServer1
</code></pre>

<p>Lock your agent when you are away:</p>

<pre><code>ssh-add -x
</code></pre>

<p>Unlock your agent when you are back:</p>

<pre><code>ssh-add -X
</code></pre>

<p>Delete all keys from your agent:</p>

<pre><code>ssh-add -D
</code></pre>

<h3>Resources:</h3>

<p><a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html">http://www.unixwiz.net/techtips/ssh-agent-forwarding.html</a><br/>
<a href="https://developer.github.com/guides/using-ssh-agent-forwarding/">https://developer.github.com/guides/using-ssh-agent-forwarding/</a><br/>
<a href="http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/">http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/</a><br/>
<a href="https://kimmo.suominen.com/docs/ssh/">https://kimmo.suominen.com/docs/ssh/</a><br/>
<a href="http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html">http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html</a><br/>
<a href="http://www.symantec.com/connect/articles/ssh-and-ssh-agent">http://www.symantec.com/connect/articles/ssh-and-ssh-agent</a></p>
]]></content>
  </entry>
  
</feed>
