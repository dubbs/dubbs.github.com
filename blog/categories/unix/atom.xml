<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unix | Kevin Warrington]]></title>
  <link href="http://dubbs.github.io/blog/categories/unix/atom.xml" rel="self"/>
  <link href="http://dubbs.github.io/"/>
  <updated>2015-07-03T11:52:01-06:00</updated>
  <id>http://dubbs.github.io/</id>
  <author>
    <name><![CDATA[Kevin Warrington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Results From the Find Command]]></title>
    <link href="http://dubbs.github.io/blog/2015/06/24/using-results-from-the-find-command/"/>
    <updated>2015-06-24T16:42:23-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/06/24/using-results-from-the-find-command</id>
    <content type="html"><![CDATA[<p>The following will find all <code>.patch</code> files and copy them to some directory:</p>

<pre><code class="bash">find . -name '*.patch' -print0 | xargs -0 -I % cp % some/directory
</code></pre>

<h2>Explanation</h2>

<p>Each result is printed to stdout, followed by an ASCII NUL character <code>-print0</code>.  These are passed to <code>xargs</code> which is configured to expect the NUL character <code>-0</code> as the separator. <code>-I %</code> is used to identify a substitution character, which will be replaced in the following command <code>cp % some/directory</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulating Unix Routing Tables]]></title>
    <link href="http://dubbs.github.io/blog/2015/02/07/manipulating-unix-routing-tables/"/>
    <updated>2015-02-07T12:25:20-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/02/07/manipulating-unix-routing-tables</id>
    <content type="html"><![CDATA[<p>For one of our latest projects, we needed to restrict incoming connections on the destination server prior to launching the our website.</p>

<p>So, we had our developers route their traffic through a VPN gateway by adding entries to the routing table:</p>

<pre><code class="bash">sudo route -nv add IP_DESTINATION IP_GATEWAY
</code></pre>

<p>You can verify the route was added by using <code>netstat</code></p>

<pre><code class="bash">netstat -rn
# Routing tables
#
# Internet:
# Destination        Gateway            Flags        Refs      Use   Netif Expire
# IP_DESTINATION     IP_GATEWAY         UGHS            0        0     en0
</code></pre>

<p>You can verify the connection is going through the vpn by using <code>traceroute</code></p>

<pre><code class="bash">traceroute IP_DESTINATION
# traceroute to IP_DESTINATION, 64 hops max, 52 byte packets
#  1  IP_GATEWAY  1.586 ms  2.257 ms  0.885 ms
</code></pre>

<p>You can remove the route by using the delete option</p>

<pre><code class="bash">sudo route delete IP_DESTINATION
# delete host IP_DESTINATION
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Config and Agent Forwarding]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding/"/>
    <updated>2014-09-10T21:50:59-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding</id>
    <content type="html"><![CDATA[<p>Quick guide to setting up ssh config and agent forwarding.</p>

<h2>1. Setup remote server</h2>

<p>Enable authorized keys on remote, <code>/etc/sshd_config</code>:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile  .ssh/authorized_keys
</code></pre>

<h2>2. Setup client keys</h2>

<p>Generate an ssh key</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>Copy public key to remote server</p>

<pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub user@example.com
</code></pre>

<p>Test connection using private key</p>

<pre><code>ssh -i ~/.ssh/id_rsa user@example.com date
</code></pre>

<h2>3. Setup client config</h2>

<p>This allows for separate ssh configuration per host:</p>

<pre><code>touch ~/.ssh/config
chmod 600 ~/.ssh/config
</code></pre>

<p>Add the following to <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
HostName example.com
User user
PubkeyAuthentication yes
IdentityFile ~/.ssh/id_rsa
</code></pre>

<p>Test the connection:</p>

<pre><code>ssh remoteServer1 date
</code></pre>

<h2>4. Setup agent forwarding</h2>

<p><code>ssh-agent</code> is a user daemon which holds unencrypted ssh keys in memory.  Key
challenges are sent from a remote machine, through any intermediary servers
and back to your local machine.  This saves you from having to store your
private keys on remote servers.</p>

<p>Turn on agent forwarding for your host, <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
...
ForwardAgent yes
</code></pre>

<p>Verify ssh-agent is running:</p>

<pre><code>echo "$SSH_AUTH_SOCK"
</code></pre>

<p>Verify you have an identity loaded:</p>

<pre><code>ssh-add -L
</code></pre>

<p>If not, add an identity:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<p>Login, logout, login to remote, first login requires passphrase.
Subsequent logins do not:</p>

<pre><code>ssh remoteServer1
exit
ssh remoteServer1
</code></pre>

<p>Lock your agent when you are away:</p>

<pre><code>ssh-add -x
</code></pre>

<p>Unlock your agent when you are back:</p>

<pre><code>ssh-add -X
</code></pre>

<p>Delete all keys from your agent:</p>

<pre><code>ssh-add -D
</code></pre>

<h3>Resources:</h3>

<p><a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html">http://www.unixwiz.net/techtips/ssh-agent-forwarding.html</a><br/>
<a href="https://developer.github.com/guides/using-ssh-agent-forwarding/">https://developer.github.com/guides/using-ssh-agent-forwarding/</a><br/>
<a href="http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/">http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/</a><br/>
<a href="https://kimmo.suominen.com/docs/ssh/">https://kimmo.suominen.com/docs/ssh/</a><br/>
<a href="http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html">http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html</a><br/>
<a href="http://www.symantec.com/connect/articles/ssh-and-ssh-agent">http://www.symantec.com/connect/articles/ssh-and-ssh-agent</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting MySQL Bin Files]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/18/deleting-mysql-bin-files/"/>
    <updated>2014-08-18T15:25:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/18/deleting-mysql-bin-files</id>
    <content type="html"><![CDATA[<p>To view your current bin files:</p>

<pre><code>$ mysql -u root -p
mysql&gt; SHOW MASTER LOGS;
</code></pre>

<p>To clear all logs but the last one:</p>

<pre><code>mysql&gt; PURGE MASTER LOGS TO 'mysql-bin.000107';
</code></pre>

<p>Open <code>my.cnf</code> and comment out the following lines to prevent logging in the future:</p>

<pre><code># log-bin=mysql-bin
</code></pre>

<p>Restart your server and confirm logging is now disabled:</p>

<pre><code>$ mysql.server restart
$ mysql -u root -p
mysql&gt; SHOW MASTER LOGS;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Non-Blocking MySQL Database Export for InnoDB Tables]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/17/non-blocking-mysql-database-export-for-innodb-tables/"/>
    <updated>2014-08-17T16:03:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/17/non-blocking-mysql-database-export-for-innodb-tables</id>
    <content type="html"><![CDATA[<p>To quickly dump a large InnoDB database to file without locking it up:</p>

<pre><code>mysqldump --single-transaction --quick -u webuser -h example.com 'dbname' &gt; dbname.sql
</code></pre>

<p>This will issue a START TRANSACTION and as long as the following commands are not
issued before your export completes, you will have a perfect snapshot:</p>

<pre><code>ALTER TABLE, CREATE TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE
</code></pre>

<p>MyISAM or MEMORY tables dumped while using this option may still change state.</p>
]]></content>
  </entry>
  
</feed>
