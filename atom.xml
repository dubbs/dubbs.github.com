<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Warrington]]></title>
  <link href="http://dubbs.github.io/atom.xml" rel="self"/>
  <link href="http://dubbs.github.io/"/>
  <updated>2014-03-15T16:06:13-06:00</updated>
  <id>http://dubbs.github.io/</id>
  <author>
    <name><![CDATA[Kevin Warrington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache and or Nginx]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/14/apache-and-or-nginx/"/>
    <updated>2014-03-14T23:54:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/14/apache-and-or-nginx</id>
    <content type="html"><![CDATA[<h2>Apache</h2>

<p>Apache was designed to be <strong>consistent</strong> and <strong>reliable</strong> at processing requests.</p>

<p>It uses a <strong>process-driven</strong> architecture and handles one connection per-process or per-thread.</p>

<p>Apache comes with 2 multi processing modules (MPM), which bind to ports, accept requests and spawn processes:</p>

<ol>
<li><p><strong>Prefork</strong> MPM</p>

<p> Uses multiple child processes with one thread each.
 Each process handles one connection at a time.</p></li>
<li><p><strong>Worker</strong> MPM</p>

<p> Uses multiple child processes with many threads each.
 Each thread handles one connection at a time.
 If you want to use mod_php (not thread safe), it is recommended that you also use FastCGI, so that php is running in its own memory space.</p></li>
</ol>


<p>Apache does not scale well under high server load, often consuming large amounts of RAM and CPU.</p>

<p>With Apache, it is easy to configure complex setups, it has excellent documentation and abundant module availability.</p>

<h2>Nginx</h2>

<p>Nginx was designed to solve the <a href="https://en.wikipedia.org/wiki/C10k_problem">c10k problem</a>, and as a result, is a highly performant http and reverse proxy server.</p>

<p>It uses an <strong>event-driven</strong> architecture and handles multiple connections
in a single event loop.</p>

<p>Nginx is very good at serving <em>static content</em>, which accounts for 80 &ndash; 95% of website requests.
It scales very well under high server load, and is not dependent on the underlying server hardware.</p>

<p>Compared to other more established web servers,
complex site configuration is typically more difficult with Nginx,
due to lightweight design.  It also lacking in documentation and module support.</p>

<p>Some notable sites using Nginx include:</p>

<ul>
<li>github</li>
<li>wordpress</li>
<li>pinterest</li>
<li>netflix</li>
<li>cloudflare</li>
</ul>


<h2>Both?</h2>

<p>Nginx can be used as a reverse proxy, in front of Apache, handling all
requests for static content.  All other requests are forwarded to
Apache via <code>proxypass</code>.  You will need to install mod_rpaf, so
Apache picks up the <code>X-Real-IP</code> header provided by nginx.  This will make
it seem as though Apache handled the original request.</p>

<!--
http://serverfault.com/questions/273260/when-should-i-switch-to-nginx
http://www.inetu.net/about/server-smarts-blog/january-2013/nginx-vs-apache-which-web-server-is-right-for-your
 -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modernizr Plugin API]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/13/modernizr-plugin-api/"/>
    <updated>2014-03-13T16:22:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/13/modernizr-plugin-api</id>
    <content type="html"><![CDATA[<p>Modernizr provides a great plugin API, where custom tests can be added, for features that are currently not supported.</p>

<p>To add a test, simply call the <code>addTest</code> method.</p>

<p>Here is a example of a test used to determine if a browser <a href="http://responsivenews.co.uk/post/18948466399/cutting-the-mustard">cuts the mustard</a>:</p>

<pre><code>(function (window, document, Modernizr) {
  'use strict';
  Modernizr.addTest('mustard', function () {
    if('querySelector' in document &amp;&amp;
        'localStorage' in window &amp;&amp;
        'addEventListener' in window) {
      return true;
    }
  });
}(this, document, this.Modernizr));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/12/vagrant/"/>
    <updated>2014-03-12T10:45:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/12/vagrant</id>
    <content type="html"><![CDATA[<p>Vagrant is used to <em>create</em> and <em>configure</em>
lightweight, reproducible, and portable (Linux, Mac OS X or Windows) development environments</p>

<h2>Setup</h2>

<p>A <code>Vagrantfile</code> is used to describe your project&rsquo;s environment, specifically:</p>

<ol>
<li>root directory</li>
<li>box or machine type, allocated resources and how it is accessed</li>
<li>software installed</li>
</ol>


<p>Software installation can be deferred to provisioning tools such as <strong>shell scripts</strong>, <strong>Chef</strong>, or <strong>Puppet</strong>.</p>

<p>To create a new Vagrantfile, run:</p>

<pre><code>vagrant init
</code></pre>

<h2>Boxes</h2>

<p>Vagrant uses as a box (base image) to clone a virtual machine.</p>

<p>So, the first step is to add a box from the <a href="https://www.vagrantcloud.com/discover/">Vagrant Cloud</a>:</p>

<pre><code>vagrant box add chef/ubuntu-13.10
</code></pre>

<p>Inside your <code>Vagrantfile</code>, reference this box:</p>

<pre><code>Vagrant.configure("2") do |config|
    config.vm.box = "chef/ubuntu-13.10"
end
</code></pre>

<p>Verify</p>

<pre><code>vagrant up
vagrant ssh
</code></pre>

<h2>Provisioning</h2>

<p>Vagrant has built in provisioning via the <strong>shell</strong> provisioner.</p>

<p>First create a public directory to house our web files:</p>

<pre><code>mkdir public
echo "HI" &gt; public/index.html
</code></pre>

<p>Simply create a bootstrap.sh file at the root of our project:</p>

<pre><code>#!/usr/bin/env bash

apt-get update
apt-get install -y apache2
rm -rf /var/www
ln -fs /vagrant/public /var/www
</code></pre>

<p>Add this script reference to our Vagrantfile:</p>

<pre><code>Vagrant.configure("2") do |config|
    config.vm.provision :shell, :path =&gt; "bootstrap.sh"
end
</code></pre>

<p>Then reload and run the provisoner</p>

<pre><code>vagrant reload --provision
</code></pre>

<p>Verify</p>

<pre><code>vagrant ssh
wget -qO- 127.0.0.1
</code></pre>

<h2>Networking</h2>

<p>Vagrant supports port forwarding, public and private networks</p>

<p>To setup port forwarding for our apache server simply:</p>

<pre><code>Vagrant.configure("2") do |config|
    config.vm.network :forwarded_port, host: 4567, guest: 80
end
</code></pre>

<p>Then reload</p>

<pre><code>vagrant reload
</code></pre>

<p>Verify</p>

<pre><code>http://localhost:4567
</code></pre>

<h2>Teardown</h2>

<p>Vagrant supports a number of teardown options:</p>

<ul>
<li><strong>Suspend</strong> saves VM RAM and contents to disk, fast boot</li>
<li><strong>Halt</strong> saves VM contents to disk, cold boot</li>
<li><strong>Destroy</strong> removes VM from disk</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Computing Service Models]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/10/cloud-computing-service-models/"/>
    <updated>2014-03-10T12:50:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/10/cloud-computing-service-models</id>
    <content type="html"><![CDATA[<h2>IaaS (Infrastructure as a Service)</h2>

<ul>
<li>Provider manages underlying infrastructure, eg. storage, network and computing resources</li>
<li>You can deploy, run and control software</li>
<li>Pricing model: usage and component based</li>
</ul>


<p>Providers:</p>

<ul>
<li>AWS EC2</li>
<li>Joyent</li>
<li>Rackspace</li>
</ul>


<h2>PaaS (Platform as a Service)</h2>

<ul>
<li>Provider manages underlying infrastructure</li>
<li>Provider manages operating system</li>
<li>Provider manages programming languages, frameworks, libraries, services and tools for you to create and deploy applications.</li>
<li>You control deployed applications and configuration</li>
<li>Pricing model: usage and component based</li>
</ul>


<p>Providers:</p>

<ul>
<li>Heroku</li>
<li>AWS Elastic Beanstalk</li>
<li>Engine Yard</li>
<li>Google App Engine</li>
<li>Windows Azure</li>
<li>OpenStack</li>
<li>Nodejitsu</li>
</ul>


<h2>SaaS (Software as a Service)</h2>

<ul>
<li>Provider manages underlying infrastructure</li>
<li>Provider manages operating system</li>
<li>Provider manages application platform and even individual application capabilities</li>
<li>You control user-specific configuration</li>
<li>You use application on client devices through either a web browser or API</li>
<li>Pricing model: monthly or yearly flat fee</li>
</ul>


<p>Providers:</p>

<ul>
<li>Salesforce CRM</li>
<li>Dropbox</li>
<li>Google Apps</li>
<li>LinkedIn</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Loopback Interface]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/08/using-the-loopback-interface/"/>
    <updated>2014-03-08T15:14:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/08/using-the-loopback-interface</id>
    <content type="html"><![CDATA[<p>The hosts file is used to map hostnames to ip addresses.</p>

<p><strong>localhost</strong> is the hostname for the loopback network interface, in <code>/etc/hosts</code>:</p>

<pre><code># IPv4 loopback address
127.0.0.1 localhost

# IPv6 loopback address
::1 localhost

# IPv6 link-local address
fe80::1%lo0 localhost
</code></pre>

<p>An <strong>loopback</strong> address is used to send a packet to itself, whereas <strong>link-local</strong>
allows packet transfer between devices on the local link (not routable).</p>

<p>Loopback addresses are often used in web development:</p>

<pre><code>127.0.0.1 localhost project1.local project2.local
</code></pre>

<p>They are also used to increase privacy and security.  Here is a very helpful <a href="http://someonewhocares.org/hosts/hosts">resource</a> on the subject.</p>

<p>After updating your hosts file, be sure to clear the directory service cache:</p>

<pre><code>dscacheutil -flushcache
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: Failed to Create Host-Only Adapter]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/07/error-failed-to-create-host-only-adapter/"/>
    <updated>2014-03-07T20:50:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/07/error-failed-to-create-host-only-adapter</id>
    <content type="html"><![CDATA[<p>When trying to run <code>vagrant up</code>, received error:</p>

<pre><code>There was an error while executing `VBoxManage`, a CLI used by Vagrant
for controlling VirtualBox. The command and stderr is shown below.

Command: ["hostonlyif", "create"]

Stderr: 0%...
Progress state: NS_ERROR_FAILURE
VBoxManage: error: Failed to create the host-only adapter
VBoxManage: error: VBoxNetAdpCtl: Error while adding new interface: failed to open /dev/vboxnetctl: No such file or directory

VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component HostNetworkInterface, interface IHostNetworkInterface
VBoxManage: error: Context: "int handleCreate(HandlerArg*, int, int*)" at line 68 of file VBoxManageHostonly.cpp
</code></pre>

<p>This happens because another VM is running in VirtualBox, run:</p>

<pre><code>sudo /Library/StartupItems/VirtualBox/VirtualBox restart
</code></pre>

<p>If VirtualBox is loading on startup, remove it:</p>

<pre><code>cd /Library/StartupItems
rm -r VirtualBox
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verifying Data using Checksums]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/07/verifying-data-using-checksums/"/>
    <updated>2014-03-07T16:31:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/07/verifying-data-using-checksums</id>
    <content type="html"><![CDATA[<p>Checksums are used verify data integrity and in some cases, authenticity.</p>

<p>It is especially important to run checksums on large files, such as operating systems, where 100% completeness is desired.  As file size increases, so will the possibility of errors during transmission.</p>

<p>To check a single file on Mac OS X, simply run:</p>

<pre><code>shasum -a 256 file.iso
</code></pre>

<p>To check multiple files using a SHA256SUMS file:</p>

<pre><code>cd ~/Downloads
shasum -a 256 -c 1.4.3_SHA256SUMS 2&gt;&amp;1 | grep OK
</code></pre>

<p>If the file was verified you should see:</p>

<pre><code>Vagrant-1.4.3.dmg: OK
</code></pre>

<p><a href="https://help.ubuntu.com/community/HowToSHA256SUM">HowToSHA256SUM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: MySQL server has gone away]]></title>
    <link href="http://dubbs.github.io/blog/2013/10/16/error-mysql-server-has-gone-away/"/>
    <updated>2013-10-16T13:17:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/10/16/error-mysql-server-has-gone-away</id>
    <content type="html"><![CDATA[<p>When trying to create a new mysql user, I came across the error:</p>

<pre><code>ERROR 2006 (HY000) at line 1: MySQL server has gone away
</code></pre>

<p>The fix turned out to be simple, as the documentation states, &ldquo;<a href="http://dev.mysql.com/doc/refman/5.0/en/mysql-upgrade.html">mysql_upgrade</a> should be executed each time you upgrade MySQL&rdquo;.  The following command fixed the problem.</p>

<pre><code>mysql_upgrade --password
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining files on the command line]]></title>
    <link href="http://dubbs.github.io/blog/2013/10/15/joining-files-on-the-command-line/"/>
    <updated>2013-10-15T16:00:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/10/15/joining-files-on-the-command-line</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s an extremely easy way to join files in unix.  It uses the <code>()</code> subshell operator, which waits for the enclosed command to return before passing the result to standard out.</p>

<pre><code>(cat file1 file2)&gt; file3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting between formats]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/26/converting-between-formats/"/>
    <updated>2013-09-26T13:17:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/26/converting-between-formats</id>
    <content type="html"><![CDATA[<p>There are many tools you can use to convert between file formats.</p>

<p>Convert <code>bin</code> to <code>iso</code>, with bchunk:</p>

<pre><code>brew install bchunk
bchunk input.bin input.cue output.iso
</code></pre>

<p>Convert <code>png</code> to <code>svg</code>, with convert and potrace, for simple images:</p>

<pre><code>brew install imagemagick potrace
convert file.png file.pnm
potrace file.pnm -s -o file.svg -C#ff0000 -k0.6 # red foreground, more detail
rm file.pnm
</code></pre>

<p>More to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Pipelines vs Redirection]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/25/unix-pipelines-vs-redirection/"/>
    <updated>2013-09-25T20:05:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/25/unix-pipelines-vs-redirection</id>
    <content type="html"><![CDATA[<p>Redirection is used to send data from standard streams to specific locations.</p>

<p>To send the standard output stream to a file, instead of the terminal:</p>

<pre><code>command1 &gt; outfile
command1 1&gt; outfile
</code></pre>

<p>Same as above, but instead send the standard error stream:</p>

<pre><code>command1 2&gt; outfile
</code></pre>

<p>To send standard output/error streams to a file, instead of the terminal:</p>

<pre><code>command1 &gt; outfile 2&gt;&amp;1
</code></pre>

<p>Output can also be disposed of using the null device:</p>

<pre><code>command1 &gt; /dev/null 2&gt;&amp;1
</code></pre>

<p>To use the contents of a file as the standard input stream to a command, instead of using keyboard input:</p>

<pre><code>command1 &lt; infile
</code></pre>

<p>Input can be read from one file and output to another:</p>

<pre><code>command1 &lt; infile &gt; outfile
</code></pre>

<p>The standard output of one command can also be used as the standard input to another using a temporary file:</p>

<pre><code>command1 &gt; file
command2 &lt; file
rm file
</code></pre>

<p>However, this is inefficient as the second command has to wait for the first to complete before proceeding.  Also, there is a chance that the temporary file will overwrite an already existing one.</p>

<p>Instead, it is more efficient to directly stream the output of one command into another via <code>pipes</code>:</p>

<pre><code>command1 | command2
</code></pre>

<p>Along with the standard out, you can also send standard error, notice that it appears before the pipe.</p>

<pre><code>command1 2&gt;&amp;1 | command2
</code></pre>

<p>It is also possible to direct the output of a command to standard out and an outfile using <code>tee</code>.</p>

<pre><code>command1 | tee outfile
</code></pre>

<p>Lastly, if you want to avoid overwriting files when redirecting, set noclobber:</p>

<pre><code>set -o noclobber
command1 &gt; existingfile
# -bash: existingfile: cannot overwrite existing file
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mounting an AFP Filesystem]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/23/mounting-an-afp-filesystem/"/>
    <updated>2013-09-23T13:35:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/23/mounting-an-afp-filesystem</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a simple way to connect to an Apple Filing Protocol (AFP) based server and access shared files.</p>

<pre><code>mkdir /Volumes/my-share
mount_afp "afp://192.168.0.1/folder/" /Volumes/my-share
</code></pre>

<p>You can access your new connection in either <code>/Volumes</code> or in left pane of the finder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forward vs Reverse Proxy using Apache]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/23/forward-vs-reverse-proxy-using-apache/"/>
    <updated>2013-09-23T13:09:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/23/forward-vs-reverse-proxy-using-apache</id>
    <content type="html"><![CDATA[<p>A proxy server acts as an intermediary between a client and a destination server, primarily controlling access to resources and caching content.</p>

<p>To enable proxy functionality in Apache, use the following:</p>

<pre><code># /etc/apache2/httpd.conf
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
</code></pre>

<h2>Forward Proxy</h2>

<p>A <a href="http://en.wikipedia.org/wiki/Proxy_server#Forward_proxies">Forward Proxy</a> is typically used to:</p>

<ul>
<li>hide the identities of clients</li>
<li>provide internet access to clients blocked by firewall</li>
<li>cache content to reduce network traffic</li>
</ul>


<p>A forward proxy accepts requests from internal clients and forwards them to an external resource.</p>

<p><img src="http://dubbs.github.io/images/forward-proxy.png"></p>

<p>To configure this in Apache, we can simply control who has access to external resources by
specifying their IP address.</p>

<pre><code>&lt;VirtualHost *:80&gt;
  # Enables Apache to acting as forwarding server
  ProxyRequests On

  # Adds Via header to requests
  ProxyVia On

  &lt;Proxy *&gt;
    Order deny,allow
    Deny from all

    # Only allows this client to proxy requests
    Allow from 192.168.0.11
  &lt;/Proxy&gt;
&lt;/VirtualHost&gt;
</code></pre>

<h2>Reverse Proxy</h2>

<p>A <a href="http://en.wikipedia.org/wiki/Reverse_proxy">Reverse proxy</a> is typically used to:</p>

<ul>
<li>hide the identities of servers</li>
<li>act as load balancer</li>
<li>act as web accelerator</li>
<li>used to perform A/B testing</li>
</ul>


<p>A reverse proxy accepts requests from external clients and usually forwards them
to an internal resource.</p>

<p><img src="http://dubbs.github.io/images/reverse-proxy.png"></p>

<p>To configure this in Apache, we use the <code>ProxyPass</code> and <code>ProxyPassReverse</code> directives.</p>

<pre><code>&lt;VirtualHost *:80&gt;
  # Prevents Apache from acting as forwarding server
  ProxyRequests Off

  # http://example.com/assets/css to be internally converted into a proxy request to http://cdn.example.com/css
  ProxyPass /assets/ http://cdn.example.com/

  # if http://cdn.example.com/css has a redirect to http://cdn.example.com/v2/css
  # Apache will adjust the request to http://example.com/assets/v2/css before forwarding response
  ProxyPassReverse /assets/ http://cdn.example.com/
&lt;/VirtualHost&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Querying MySQL Configuration]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/23/querying-mysql-configuration/"/>
    <updated>2013-09-23T12:40:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/23/querying-mysql-configuration</id>
    <content type="html"><![CDATA[<p>MySQL system variables can be queried using the <a href="http://dev.mysql.com/doc/refman/5.7/en/show-variables.html">show variables</a> syntax:</p>

<pre><code>mysql -uUSERNAME -pPASSWORD -e 'SHOW VARIABLES LIKE "ft_min_word_len"'
</code></pre>

<p>It&rsquo;s also useful to find out with <code>my.cnf</code> file MySQL will try to load on init:</p>

<pre><code>mysql --help | grep cnf
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving on the Command Line]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/17/moving-on-the-command-line/"/>
    <updated>2013-09-17T20:13:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/17/moving-on-the-command-line</id>
    <content type="html"><![CDATA[<p>Moving along the command line will be a breeze, if you know the following shortcuts.</p>

<p><kbd>ctrl</kbd>+<kbd>a</kbd> &ndash; move to start of line<br/>
<kbd>ctrl</kbd>+<kbd>e</kbd> &ndash; move to end of line<br/>
<kbd>alt</kbd>+<kbd>b</kbd> &ndash; move backwards a word<br/>
<kbd>alt</kbd>+<kbd>f</kbd> &ndash; move forwards a word<br/>
<kbd>alt</kbd>+<kbd>del</kbd> &ndash; remove word<br/>
<kbd>ctrl</kbd>+<kbd>k</kbd> &ndash; remove to end of line</p>

<p>On Mac, make sure you setup the following config in <code>Terminal &gt; Preferences &gt; Keyboard</code>:</p>

<ul>
<li>use option as meta key is checked</li>
<li>option cursor left is set to \033b</li>
<li>option cursor right is set to \033f</li>
</ul>


<p>where \033 = <kbd>esc</kbd></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Background Processes]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/16/working-with-background-processes/"/>
    <updated>2013-09-16T21:33:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/16/working-with-background-processes</id>
    <content type="html"><![CDATA[<p>For long running processes, rather than blocking your prompt, it&rsquo;s often useful to push commands to the background and complete other tasks.</p>

<p>To run a command in the background.</p>

<pre><code>&lt;command&gt; &amp;
</code></pre>

<p>To run a command in the background, detached from your console.  The process will not terminate on logout.  <code>nice</code> sets a lower priority.</p>

<pre><code>nohup nice &lt;command&gt; &amp;
</code></pre>

<p>List all background processes</p>

<pre><code>jobs
</code></pre>

<p>To send currently running command to background, first stop the process, <code>Ctrl-z</code>.</p>

<pre><code>bg
</code></pre>

<p>To bring a background process to the foreground</p>

<pre><code>fg
fg %1
</code></pre>

<p>To destroy a background process</p>

<pre><code>kill %1 
kill -9 %1  
kill &lt;pid&gt;
</code></pre>

<p>To receive an email notification when a background process finishes</p>

<pre><code>&lt;command&gt; | tee command.log | mailx -s 'PROCESS COMPLETE' test@example.com &amp;
</code></pre>

<p>To run a set of jobs when cpu levels permit, use batch.  <kbd>ctrl</kbd>+<kbd>d</kbd> to end input.</p>

<pre><code>user@example.com &gt; ~/.forward
batch -m
command1
command2
command3
</code></pre>

<p>You can list batch jobs and kill using the id</p>

<pre><code>at -l
at -r id
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Import/Export Progress Bar]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/05/mysql-import-slash-export-progress-bar/"/>
    <updated>2013-09-05T22:05:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/05/mysql-import-slash-export-progress-bar</id>
    <content type="html"><![CDATA[<p>MySQL command line progress can be monitored using the terminal-based &ldquo;Pipe Viewer&rdquo; <code>pv</code>.</p>

<h2>Import</h2>

<pre><code>pv /path/to/sqlfile.sql | mysql -uUSERNAME -pPASSWORD -D DATABASE_NAME
</code></pre>

<h2>Export</h2>

<p>We need to estimate the file size of our export to get an accurate reading.  This can be done via the information schema:</p>

<pre><code>SELECT
    Data_BB / POWER(1024,1) Data_KB,
    Data_BB / POWER(1024,2) Data_MB,
    Data_BB / POWER(1024,3) Data_GB
FROM (
    SELECT SUM(data_length) Data_BB
    FROM information_schema.tables
    WHERE table_schema IN ('DATABASE_NAME')
) A;
</code></pre>

<p>We then use the estimated size to track export progress:</p>

<pre><code>mysqldump -uUSERNAME -pPASSWORD DATABASE_NAME | pv -s 9999M &gt; DATABASE_NAME.sql 
</code></pre>

<p>Beer Break!</p>
]]></content>
  </entry>
  
</feed>
