<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Warrington]]></title>
  <link href="http://dubbs.github.io/atom.xml" rel="self"/>
  <link href="http://dubbs.github.io/"/>
  <updated>2014-09-24T22:53:03-06:00</updated>
  <id>http://dubbs.github.io/</id>
  <author>
    <name><![CDATA[Kevin Warrington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSL Certificate for Localhost]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/24/ssl-certificate-for-localhost/"/>
    <updated>2014-09-24T22:22:09-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/24/ssl-certificate-for-localhost</id>
    <content type="html"><![CDATA[<p>Create a self-signed certificate and move it to the apache conf
directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># generate private key</span>
</span><span class='line'>openssl genrsa -des3 -out server.key 1024
</span><span class='line'>
</span><span class='line'><span class="c"># generate csr</span>
</span><span class='line'>openssl req -new -key server.key -out server.csr
</span><span class='line'>
</span><span class='line'><span class="c"># remove passphrase from private key</span>
</span><span class='line'>cp server.key server.key.org
</span><span class='line'>openssl rsa -in server.key.org -out server.key
</span><span class='line'>
</span><span class='line'><span class="c"># create self-signed cert </span>
</span><span class='line'>openssl x509 -req -days <span class="m">365</span> -in server.csr -signkey server.key -out server.crt
</span><span class='line'>
</span><span class='line'><span class="c"># move to apache conf dir</span>
</span><span class='line'>cp server.crt /etc/apache2/server.crt
</span><span class='line'>cp server.key /etc/apache2/server.key
</span></code></pre></td></tr></table></div></figure>


<p>Enable the default ssl configuration, <code>/etc/apache2/httpd.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># uncomment the following line</span>
</span><span class='line'>Include /private/etc/apache2/extra/httpd-ssl.conf
</span></code></pre></td></tr></table></div></figure>


<p>Add host entry for development site, <code>/etc/hosts</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>127.0.0.1 devsite.local
</span></code></pre></td></tr></table></div></figure>


<p>Modify the default virtual host entry, <code>/etc/apache2/extra/httpd-ssl.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># update config for site</span>
</span><span class='line'>DocumentRoot <span class="s2">&quot;/Library/WebServer/Documents/devsite&quot;</span>
</span><span class='line'>ServerName devsite.local:433
</span></code></pre></td></tr></table></div></figure>


<p>Restart Apache</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executing Drush Commands Outside of Vagrant Using Aliases]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/18/executing-drush-commands-outside-of-vagrant-using-aliases/"/>
    <updated>2014-09-18T11:17:42-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/18/executing-drush-commands-outside-of-vagrant-using-aliases</id>
    <content type="html"><![CDATA[<p>Drush aliases make it possible to run commands from outside your
vagrant box, and even outside of your project directory.</p>

<p>To start, you need a <code>~/.drush/dev.aliases.drushrc.php</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$aliases</span><span class="p">[</span><span class="s1">&#39;project1&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;root&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/vagrant&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-host&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.124&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;vagrant&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$aliases</span><span class="p">[</span><span class="s1">&#39;project2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;root&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/vagrant&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-host&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.125&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;vagrant&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, you need to copy your public key to your vagrant box, the password
is <code>vagrant</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-copy-id -i ~/.ssh/id_rsa.pub vagrant@10.0.0.124
</span></code></pre></td></tr></table></div></figure>


<p>And finally, test the connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drush @project1 status
</span></code></pre></td></tr></table></div></figure>


<p>Drush will use your alias configuration to select the appropriate root directory and remote
host.  You should be able to run the above command from any directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Config and Agent Forwarding]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding/"/>
    <updated>2014-09-10T21:50:59-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding</id>
    <content type="html"><![CDATA[<p>Quick guide to setting up ssh config and agent forwarding.</p>

<h2>1. Setup remote server</h2>

<p>Enable authorized keys on remote, <code>/etc/sshd_config</code>:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile  .ssh/authorized_keys
</code></pre>

<h2>2. Setup client keys</h2>

<p>Generate an ssh key</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>Copy public key to remote server</p>

<pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub user@example.com
</code></pre>

<p>Test connection using private key</p>

<pre><code>ssh -i ~/.ssh/id_rsa user@example.com date
</code></pre>

<h2>3. Setup client config</h2>

<p>This allows for separate ssh configuration per host:</p>

<pre><code>touch ~/.ssh/config
chmod 600 ~/.ssh/config
</code></pre>

<p>Add the following to <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
HostName example.com
User user
PubkeyAuthentication yes
IdentityFile ~/.ssh/id_rsa
</code></pre>

<p>Test the connection:</p>

<pre><code>ssh remoteServer1 date
</code></pre>

<h2>4. Setup agent forwarding</h2>

<p><code>ssh-agent</code> is a user daemon which holds unencrypted ssh keys in memory.  Key
challenges are sent from a remote machine, through any intermediary servers
and back to your local machine.  This saves you from having to store your
private keys on remote servers.</p>

<p>Turn on agent forwarding for your host, <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
...
ForwardAgent yes
</code></pre>

<p>Verify ssh-agent is running:</p>

<pre><code>echo "$SSH_AUTH_SOCK"
</code></pre>

<p>Verify you have an identity loaded:</p>

<pre><code>ssh-add -L
</code></pre>

<p>If not, add an identity:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<p>Login, logout, login to remote, first login requires passphrase.
Subsequent logins do not:</p>

<pre><code>ssh remoteServer1
exit
ssh remoteServer1
</code></pre>

<p>Lock your agent when you are away:</p>

<pre><code>ssh-add -x
</code></pre>

<p>Unlock your agent when you are back:</p>

<pre><code>ssh-add -X
</code></pre>

<p>Delete all keys from your agent:</p>

<pre><code>ssh-add -D
</code></pre>

<h3>Resources:</h3>

<p><a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html  ">http://www.unixwiz.net/techtips/ssh-agent-forwarding.html  </a>
<a href="https://developer.github.com/guides/using-ssh-agent-forwarding/  ">https://developer.github.com/guides/using-ssh-agent-forwarding/  </a>
<a href="http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/  ">http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/  </a>
<a href="https://kimmo.suominen.com/docs/ssh/  ">https://kimmo.suominen.com/docs/ssh/  </a>
<a href="http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html  ">http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html  </a>
<a href="http://www.symantec.com/connect/articles/ssh-and-ssh-agent">http://www.symantec.com/connect/articles/ssh-and-ssh-agent</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clear the DNS Cache]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/04/clear-the-dns-cache/"/>
    <updated>2014-09-04T12:55:27-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/04/clear-the-dns-cache</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve updated <code>/etc/hosts</code> and your changes aren&rsquo;t reflected in Google Chrome.  Try clearing the DNS cache.</p>

<h2>Chrome</h2>

<p>Navigate to <code>chrome://net-internals/#dns</code> and click &ldquo;Clear Host Cache&rdquo;<br/>
Navigate to <code>chrome://net-internals/#sockets</code> and click &ldquo;Flush Socket Pools&rdquo;</p>

<h2>Mac OS X v10.6</h2>

<pre><code>sudo dscacheutil -flushcache
</code></pre>

<h2>Mac OS X v10.7+</h2>

<pre><code>sudo killall -HUP mDNSResponder
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Your Git Fork Up-to-date]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/02/keeping-your-fork-up-to-date/"/>
    <updated>2014-09-02T20:42:51-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/02/keeping-your-fork-up-to-date</id>
    <content type="html"><![CDATA[<p>When your fork falls behind, and it will, here&rsquo;s how to quickly sync it up with master.</p>

<p>First, clone your forked repo, if you havent already:</p>

<pre><code>git clone git@github.com:&lt;fork&gt;/&lt;repo&gt;.git
cd drush
</code></pre>

<p>Then, merge upstream and push to github:</p>

<pre><code>git remote add upstream git@github.com:&lt;original&gt;/&lt;repo&gt;.git
git fetch upstream
git checkout master
git merge upstream/master
git push origin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ignorning Ri and RDoc During Gem Install]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/22/ignorning-ri-and-rdoc-during-gem-install/"/>
    <updated>2014-08-22T11:56:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/22/ignorning-ri-and-rdoc-during-gem-install</id>
    <content type="html"><![CDATA[<p>I personally never use the ri (Ruby Index) and RDoc (Ruby Documentation).</p>

<p>To prevent them from installing during <code>gem install</code>, just add this line to your ~/.gemrc or /etc/gemrc:</p>

<pre><code>gem: --no-rdoc --no-ri
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting MySQL Bin Files]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/18/deleting-mysql-bin-files/"/>
    <updated>2014-08-18T15:25:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/18/deleting-mysql-bin-files</id>
    <content type="html"><![CDATA[<p>To view your current bin files:</p>

<pre><code>$ mysql -u root -p
mysql&gt; SHOW MASTER LOGS;
</code></pre>

<p>To clear all logs but the last one:</p>

<pre><code>mysql&gt; PURGE MASTER LOGS TO 'mysql-bin.000107';
</code></pre>

<p>Open <code>my.cnf</code> and comment out the following lines to prevent logging in the future:</p>

<pre><code># log-bin=mysql-bin
</code></pre>

<p>Restart your server and confirm logging is now disabled:</p>

<pre><code>$ mysql.server restart
$ mysql -u root -p
mysql&gt; SHOW MASTER LOGS;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Non-Blocking MySQL Database Export for InnoDB Tables]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/17/non-blocking-mysql-database-export-for-innodb-tables/"/>
    <updated>2014-08-17T16:03:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/17/non-blocking-mysql-database-export-for-innodb-tables</id>
    <content type="html"><![CDATA[<p>To quickly dump a large InnoDB database to file without locking it up:</p>

<pre><code>mysqldump --single-transaction --quick -u webuser -h example.com 'dbname' &gt; dbname.sql
</code></pre>

<p>This will issue a START TRANSACTION and as long as the following commands are not
issued before your export completes, you will have a perfect snapshot:</p>

<pre><code>ALTER TABLE, CREATE TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE
</code></pre>

<p>MyISAM or MEMORY tables dumped while using this option may still change state.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Your Locate Database]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/16/update-your-locate-database/"/>
    <updated>2014-08-16T16:15:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/16/update-your-locate-database</id>
    <content type="html"><![CDATA[<p>The <code>locate</code> command is great for searching the entire filesystem for files:</p>

<pre><code>locate my.cnf
</code></pre>

<p>Recently created files and directories might not show up, so update the index:</p>

<pre><code>locate updatedb
/usr/libexec/locate.updatedb
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Modes and Init Files]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/19/shell-modes-and-init-files/"/>
    <updated>2014-03-19T23:20:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/19/shell-modes-and-init-files</id>
    <content type="html"><![CDATA[<h2>Modes</h2>

<p>There are two main shell modes:</p>

<h3>1. Login</h3>

<p>When a user logs in with a non-graphical interface or SSH.</p>

<h3>2. Interactive</h3>

<p>When a user has a prompt and standard in/out are connected to the terminal.</p>

<h2>Combinations of Modes</h2>

<p>A shell can be initialized with the following mode combinations:</p>

<h4>Login + Interactive</h4>

<ul>
<li>log in to a remote system via SSH</li>
<li>new terminal tab, Mac OS X</li>
</ul>


<p>files sourced:</p>

<pre><code># The systemwide initialization file
/etc/profile

# The personal initialization files, first one found, in order
~/.bash_profile
~/.bash_login
~/.profile
</code></pre>

<h4>Non-login + Interactive</h4>

<ul>
<li>new terminal tab, linux</li>
<li>start new shell process ($ bash)</li>
<li>execute script remotely and request terminal (ssh user@host -t &lsquo;echo $PWD&rsquo;)</li>
</ul>


<p>files sourced:</p>

<pre><code># The individual per-interactive-shell startup file
~/.bashrc
</code></pre>

<h4>Non-login + Non-Interactive</h4>

<ul>
<li>run an executable with #!/usr/bin/env bash shebang</li>
<li>run a script ($ bash test.sh)</li>
<li>execute script remotely (ssh user@host &lsquo;echo $PWD&rsquo;)</li>
</ul>


<p>files sourced:</p>

<pre><code>source $BASH_ENV
</code></pre>

<p>References:</p>

<ul>
<li><a href="http://linuxcommand.org/">Linux Command</a></li>
<li><a href="https://github.com/sstephenson/rbenv/wiki/Unix-shell-initialization">Unix Shell Initialization</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executing Shell Scripts]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/18/executing-shell-scripts/"/>
    <updated>2014-03-18T23:53:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/18/executing-shell-scripts</id>
    <content type="html"><![CDATA[<p>Here are some of the basic ways you can execute scripts on the command line.</p>

<p><code>source</code> or <code>.</code> will read and execute commands from filename in the <strong>current shell</strong> environment.<br/>
Any environment variables set within the script will remain after exit.</p>

<pre><code>. test.sh
source test.sh
</code></pre>

<p><code>sh</code> or <code>bash</code> will fork a <strong>new shell</strong> with the specified interpreter.</p>

<pre><code>sh test.sh
bash test.sh
</code></pre>

<p><code>./</code> will also fork a <strong>new shell</strong>, but the file needs to be set as executable and interpreter will be derived from the shebang (<code>#!/bin/sh</code>).</p>

<pre><code>chmod +x test.sh
./test.sh
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache and or Nginx]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/14/apache-and-or-nginx/"/>
    <updated>2014-03-14T23:54:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/14/apache-and-or-nginx</id>
    <content type="html"><![CDATA[<h2>Apache</h2>

<p>Apache was designed to process web requests in a <strong>consistent</strong> and <strong>reliable</strong> manner.</p>

<p>It uses a <strong>process-driven</strong> architecture and handles one connection per-process or per-thread.</p>

<p>Apache comes with 2 multi processing modules (MPM), which bind to ports, accept requests and spawn processes:</p>

<ol>
<li><p><strong>Prefork</strong> MPM</p>

<p> Uses multiple child processes with one thread each.
 Each process handles one connection at a time.</p></li>
<li><p><strong>Worker</strong> MPM</p>

<p> Uses multiple child processes with many threads each.
 Each thread handles one connection at a time.
 If you want to use mod_php (not thread safe), it is recommended that you also use FastCGI, so that php is running in its own memory space.</p></li>
</ol>


<p>Apache does not scale well under high server load, often consuming large amounts of RAM and CPU.</p>

<p>With Apache, it is easy to configure complex setups, it has excellent documentation and abundant module availability.</p>

<h2>Nginx</h2>

<p>Nginx was designed to solve the <a href="https://en.wikipedia.org/wiki/C10k_problem">c10k problem</a>, and as a result, is a highly performant http and reverse proxy server.</p>

<p>It uses an <strong>event-driven</strong> architecture and handles multiple connections
in a single event loop.</p>

<p>Nginx is very good at serving <em>static content</em>, which accounts for 80 - 95% of website requests.
It scales very well under high server load, and is not dependent on the underlying server hardware.</p>

<p>Compared to other more established web servers,
complex site configuration is typically more difficult with Nginx,
due to lightweight design.  It also lacking in documentation and module support.</p>

<p>Some notable sites using Nginx include:</p>

<ul>
<li>github</li>
<li>wordpress</li>
<li>pinterest</li>
<li>netflix</li>
<li>cloudflare</li>
</ul>


<h2>Both?</h2>

<p>Nginx can be used as a reverse proxy, in front of Apache, handling all
requests for static content.  All other requests are forwarded to
Apache via <code>proxypass</code>.  You will need to install mod_rpaf, so
Apache can pick up the <code>X-Real-IP</code> header provided by nginx.  This will make
it seem as though Apache handled the original request.</p>

<!--
http://www.stderr.net/apache/rpaf/
http://serverfault.com/questions/273260/when-should-i-switch-to-nginx
http://www.inetu.net/about/server-smarts-blog/january-2013/nginx-vs-apache-which-web-server-is-right-for-your
 -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modernizr Plugin API]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/13/modernizr-plugin-api/"/>
    <updated>2014-03-13T16:22:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/13/modernizr-plugin-api</id>
    <content type="html"><![CDATA[<p>Modernizr provides a great plugin API, where custom tests can be added, for features that are currently not supported.</p>

<p>To add a test, simply call the <code>addTest</code> method.</p>

<p>Here is a example of a test used to determine if a browser <a href="http://responsivenews.co.uk/post/18948466399/cutting-the-mustard">cuts the mustard</a>:</p>

<pre><code>(function (window, document, Modernizr) {
  'use strict';
  Modernizr.addTest('mustard', function () {
    if('querySelector' in document &amp;&amp;
        'localStorage' in window &amp;&amp;
        'addEventListener' in window) {
      return true;
    }
  });
}(this, document, this.Modernizr));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/12/vagrant/"/>
    <updated>2014-03-12T10:45:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/12/vagrant</id>
    <content type="html"><![CDATA[<p>Vagrant is used to <em>create</em> and <em>configure</em>
lightweight, reproducible, and portable (Linux, Mac OS X or Windows) development environments</p>

<h2>Setup</h2>

<p>A <code>Vagrantfile</code> is used to describe your project&rsquo;s environment, specifically:</p>

<ol>
<li>root directory</li>
<li>box or machine type, allocated resources and how it is accessed</li>
<li>software installed</li>
</ol>


<p>Software installation can be deferred to provisioning tools such as <strong>shell scripts</strong>, <strong>Chef</strong>, or <strong>Puppet</strong>.</p>

<p>To create a new Vagrantfile, run:</p>

<pre><code>vagrant init
</code></pre>

<h2>Boxes</h2>

<p>Vagrant uses as a box (base image) to clone a virtual machine.</p>

<p>So, the first step is to add a box from the <a href="https://www.vagrantcloud.com/discover/">Vagrant Cloud</a>:</p>

<pre><code>vagrant box add chef/ubuntu-13.10
</code></pre>

<p>Inside your <code>Vagrantfile</code>, reference this box:</p>

<pre><code>Vagrant.configure("2") do |config|
    config.vm.box = "chef/ubuntu-13.10"
end
</code></pre>

<p>Verify</p>

<pre><code>vagrant up
vagrant ssh
</code></pre>

<h2>Provisioning</h2>

<p>Vagrant has built in provisioning via the <strong>shell</strong> provisioner.</p>

<p>First create a public directory to house our web files:</p>

<pre><code>mkdir public
echo "HI" &gt; public/index.html
</code></pre>

<p>Simply create a bootstrap.sh file at the root of our project:</p>

<pre><code>#!/usr/bin/env bash

apt-get update
apt-get install -y apache2
rm -rf /var/www
ln -fs /vagrant/public /var/www
</code></pre>

<p>Add this script reference to our Vagrantfile:</p>

<pre><code>Vagrant.configure("2") do |config|
    config.vm.provision :shell, :path =&gt; "bootstrap.sh"
end
</code></pre>

<p>Then reload and run the provisoner</p>

<pre><code>vagrant reload --provision
</code></pre>

<p>Verify</p>

<pre><code>vagrant ssh
wget -qO- 127.0.0.1
</code></pre>

<h2>Networking</h2>

<p>Vagrant supports port forwarding, public and private networks</p>

<p>To setup port forwarding for our apache server simply:</p>

<pre><code>Vagrant.configure("2") do |config|
    config.vm.network :forwarded_port, host: 4567, guest: 80
end
</code></pre>

<p>Then reload</p>

<pre><code>vagrant reload
</code></pre>

<p>Verify</p>

<pre><code>http://localhost:4567
</code></pre>

<h2>Teardown</h2>

<p>Vagrant supports a number of teardown options:</p>

<ul>
<li><strong>Suspend</strong> saves VM RAM and contents to disk, fast boot</li>
<li><strong>Halt</strong> saves VM contents to disk, cold boot</li>
<li><strong>Destroy</strong> removes VM from disk</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Computing Service Models]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/10/cloud-computing-service-models/"/>
    <updated>2014-03-10T12:50:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/10/cloud-computing-service-models</id>
    <content type="html"><![CDATA[<h2>IaaS (Infrastructure as a Service)</h2>

<ul>
<li>Provider manages underlying infrastructure, eg. storage, network and computing resources</li>
<li>You can deploy, run and control software</li>
<li>Pricing model: usage and component based</li>
</ul>


<p>Providers:</p>

<ul>
<li>AWS EC2</li>
<li>Joyent</li>
<li>Rackspace</li>
</ul>


<h2>PaaS (Platform as a Service)</h2>

<ul>
<li>Provider manages underlying infrastructure</li>
<li>Provider manages operating system</li>
<li>Provider manages programming languages, frameworks, libraries, services and tools for you to create and deploy applications.</li>
<li>You control deployed applications and configuration</li>
<li>Pricing model: usage and component based</li>
</ul>


<p>Providers:</p>

<ul>
<li>Heroku</li>
<li>AWS Elastic Beanstalk</li>
<li>Engine Yard</li>
<li>Google App Engine</li>
<li>Windows Azure</li>
<li>OpenStack</li>
<li>Nodejitsu</li>
</ul>


<h2>SaaS (Software as a Service)</h2>

<ul>
<li>Provider manages underlying infrastructure</li>
<li>Provider manages operating system</li>
<li>Provider manages application platform and even individual application capabilities</li>
<li>You control user-specific configuration</li>
<li>You use application on client devices through either a web browser or API</li>
<li>Pricing model: monthly or yearly flat fee</li>
</ul>


<p>Providers:</p>

<ul>
<li>Salesforce CRM</li>
<li>Dropbox</li>
<li>Google Apps</li>
<li>LinkedIn</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Loopback Interface]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/08/using-the-loopback-interface/"/>
    <updated>2014-03-08T15:14:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/08/using-the-loopback-interface</id>
    <content type="html"><![CDATA[<p>The hosts file is used to map hostnames to ip addresses.</p>

<p><strong>localhost</strong> is the hostname for the loopback network interface, in <code>/etc/hosts</code>:</p>

<pre><code># IPv4 loopback address
127.0.0.1 localhost

# IPv6 loopback address
::1 localhost

# IPv6 link-local address
fe80::1%lo0 localhost
</code></pre>

<p>An <strong>loopback</strong> address is used to send a packet to itself, whereas <strong>link-local</strong>
allows packet transfer between devices on the local link (not routable).</p>

<p>Loopback addresses are often used in web development:</p>

<pre><code>127.0.0.1 localhost project1.local project2.local
</code></pre>

<p>They are also used to increase privacy and security.  Here is a very helpful <a href="http://someonewhocares.org/hosts/hosts">resource</a> on the subject.</p>

<p>After updating your hosts file, be sure to clear the directory service cache:</p>

<pre><code>dscacheutil -flushcache
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: Failed to Create Host-Only Adapter]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/07/error-failed-to-create-host-only-adapter/"/>
    <updated>2014-03-07T20:50:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/07/error-failed-to-create-host-only-adapter</id>
    <content type="html"><![CDATA[<p>When trying to run <code>vagrant up</code>, received error:</p>

<pre><code>There was an error while executing `VBoxManage`, a CLI used by Vagrant
for controlling VirtualBox. The command and stderr is shown below.

Command: ["hostonlyif", "create"]

Stderr: 0%...
Progress state: NS_ERROR_FAILURE
VBoxManage: error: Failed to create the host-only adapter
VBoxManage: error: VBoxNetAdpCtl: Error while adding new interface: failed to open /dev/vboxnetctl: No such file or directory

VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component HostNetworkInterface, interface IHostNetworkInterface
VBoxManage: error: Context: "int handleCreate(HandlerArg*, int, int*)" at line 68 of file VBoxManageHostonly.cpp
</code></pre>

<p>This happens because another VM is running in VirtualBox, run:</p>

<pre><code>sudo /Library/StartupItems/VirtualBox/VirtualBox restart
</code></pre>

<p>If VirtualBox is loading on startup, remove it:</p>

<pre><code>cd /Library/StartupItems
rm -r VirtualBox
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verifying Data Using Checksums]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/07/verifying-data-using-checksums/"/>
    <updated>2014-03-07T16:31:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/07/verifying-data-using-checksums</id>
    <content type="html"><![CDATA[<p>Checksums are used verify data integrity and in some cases, authenticity.</p>

<p>It is especially important to run checksums on large files, such as operating systems, where 100% completeness is desired.  As file size increases, so will the possibility of errors during transmission.</p>

<p>To check a single file on Mac OS X, simply run:</p>

<pre><code>shasum -a 256 file.iso
</code></pre>

<p>To check multiple files using a SHA256SUMS file:</p>

<pre><code>cd ~/Downloads
shasum -a 256 -c 1.4.3_SHA256SUMS 2&gt;&amp;1 | grep OK
</code></pre>

<p>If the file was verified you should see:</p>

<pre><code>Vagrant-1.4.3.dmg: OK
</code></pre>

<p><a href="https://help.ubuntu.com/community/HowToSHA256SUM">HowToSHA256SUM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error: MySQL Server Has Gone Away]]></title>
    <link href="http://dubbs.github.io/blog/2013/10/16/error-mysql-server-has-gone-away/"/>
    <updated>2013-10-16T13:17:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/10/16/error-mysql-server-has-gone-away</id>
    <content type="html"><![CDATA[<p>When trying to create a new mysql user, I came across the error:</p>

<pre><code>ERROR 2006 (HY000) at line 1: MySQL server has gone away
</code></pre>

<p>The fix turned out to be simple, as the documentation states, &ldquo;<a href="http://dev.mysql.com/doc/refman/5.0/en/mysql-upgrade.html">mysql_upgrade</a> should be executed each time you upgrade MySQL&rdquo;.  The following command fixed the problem.</p>

<pre><code>mysql_upgrade --password
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining Files on the Command Line]]></title>
    <link href="http://dubbs.github.io/blog/2013/10/15/joining-files-on-the-command-line/"/>
    <updated>2013-10-15T16:00:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/10/15/joining-files-on-the-command-line</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s an extremely easy way to join files in unix.  It uses the <code>()</code> subshell operator, which waits for the enclosed command to return before passing the result to standard out.</p>

<pre><code>(cat file1 file2)&gt; file3
</code></pre>
]]></content>
  </entry>
  
</feed>
