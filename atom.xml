<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Warrington]]></title>
  <link href="http://dubbs.github.io/atom.xml" rel="self"/>
  <link href="http://dubbs.github.io/"/>
  <updated>2015-07-03T11:21:06-06:00</updated>
  <id>http://dubbs.github.io/</id>
  <author>
    <name><![CDATA[Kevin Warrington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Solr 4 on CentOS 6]]></title>
    <link href="http://dubbs.github.io/blog/2015/06/29/installing-solr-on-centos-6/"/>
    <updated>2015-06-29T11:40:14-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/06/29/installing-solr-on-centos-6</id>
    <content type="html"><![CDATA[<h2>Verify CentOS Version</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /etc/centos-release
</span></code></pre></td></tr></table></div></figure>


<h2>Install Tomcat</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install java-1.7.0-openjdk</span>
</span><span class='line'>sudo yum -y install java-1.7.0-openjdk
</span><span class='line'><span class="c"># install tomcat6</span>
</span><span class='line'>sudo yum -y install tomcat6 tomcat6-webapps tomcat6-admin-webapps
</span><span class='line'><span class="c"># change port</span>
</span><span class='line'>sudo sed -i s/8080/8983/g /etc/tomcat6/server.xml
</span></code></pre></td></tr></table></div></figure>


<p>To use the manager webapp you need to create a user with the role &ldquo;manager&rdquo;.  Add a user to <code>&lt;tomcat-users&gt;</code> in <code>/etc/tomcat6/tomcat-users.xml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;role</span> <span class="na">rolename=</span><span class="s">&quot;manager&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;role</span> <span class="na">rolename=</span><span class="s">&quot;admin&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;user</span> <span class="na">username=</span><span class="s">&quot;admin&quot;</span> <span class="na">password=</span><span class="s">&quot;password&quot;</span> <span class="na">roles=</span><span class="s">&quot;manager,admin&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start tomcat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service tomcat6 start
</span></code></pre></td></tr></table></div></figure>


<p>Open the <a href="http://admin:password@localhost:8983/manager/html">Tomcat Web Application Manager</a></p>

<h2>Install Solr</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://archive.apache.org/dist/lucene/solr/4.6.1/solr-4.6.1.tgz
</span><span class='line'>tar xvf solr-4.6.1.tgz
</span><span class='line'><span class="c"># install solr app</span>
</span><span class='line'>sudo cp -a solr-4.6.1/dist/solr-4.6.1.war /var/lib/tomcat6/webapps/solr.war
</span><span class='line'><span class="c"># copy default example config to home, where data will live</span>
</span><span class='line'>sudo cp -a solr-4.6.1/example/solr /home/
</span><span class='line'><span class="c"># set appropriate permissions</span>
</span><span class='line'>sudo chown -R tomcat:tomcat /home/solr /var/lib/tomcat6/webapps/solr
</span><span class='line'><span class="c"># update solr home directory in WEB-INF</span>
</span><span class='line'><span class="c">#    &lt;env-entry&gt;</span>
</span><span class='line'><span class="c">#       &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span>
</span><span class='line'><span class="c">#       &lt;env-entry-value&gt;/home/solr&lt;/env-entry-value&gt;</span>
</span><span class='line'><span class="c">#       &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span>
</span><span class='line'><span class="c">#    &lt;/env-entry&gt;</span>
</span><span class='line'>sudo vim /var/lib/tomcat6/webapps/solr/WEB-INF/web.xml
</span><span class='line'><span class="c"># restart so tomcat creates directory</span>
</span><span class='line'>sudo service tomcat6 restart
</span></code></pre></td></tr></table></div></figure>


<h2>Create a new core</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /home/solr
</span><span class='line'>sudo cp -a collection1 document_library
</span><span class='line'><span class="c"># clean data directory</span>
</span><span class='line'>sudo rm -rf document_library/data
</span><span class='line'>sudo mkdir document_library/data
</span></code></pre></td></tr></table></div></figure>


<h2>Add drupal solr configuration to new core</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp /vagrant/htdocs/sites/all/modules/apachesolr/solr-conf/solr-4.x/* /home/solr/document_library/conf/
</span><span class='line'>sudo service tomcat6 restart
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Results From the Find Command]]></title>
    <link href="http://dubbs.github.io/blog/2015/06/24/using-results-from-the-find-command/"/>
    <updated>2015-06-24T16:42:23-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/06/24/using-results-from-the-find-command</id>
    <content type="html"><![CDATA[<p>The following will find all <code>.patch</code> files and copy them to some directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s1">&#39;*.patch&#39;</span> -print0 <span class="p">|</span> xargs -0 -I % cp % some/directory
</span></code></pre></td></tr></table></div></figure>


<h2>Explanation</h2>

<p>Each result is printed to stdout, followed by an ASCII NUL character <code>-print0</code>.  These are passed to <code>xargs</code> which is configured to expect the NUL character <code>-0</code> as the separator. <code>-I %</code> is used to identify a substitution character, which will be replaced in the following command <code>cp % some/directory</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find a VirtualBox IP Address on Network]]></title>
    <link href="http://dubbs.github.io/blog/2015/03/22/find-a-virtualbox-ip-address-on-network/"/>
    <updated>2015-03-22T12:33:34-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/03/22/find-a-virtualbox-ip-address-on-network</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve recently connected to your VM, it should be in the arp cache.<br/>
Query the arp cache looking for a MAC address starting with <code>8:0:27</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>arp -an <span class="p">|</span> grep 8:0:27
</span><span class='line'><span class="c"># ? (192.168.0.19) at 8:0:27:d:f1:55 on en0 ifscope [ethernet]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t see it, you need to do a bit more digging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ifconfig
</span><span class='line'><span class="c"># en0:</span>
</span><span class='line'><span class="c">#     inet 192.168.0.10 netmask 0xffffff00 broadcast 192.168.0.255</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since my network has a 192.168.0.10 with a netmask of 255.255.255.0,
I can preform a &ldquo;ping sweep&rdquo; to count available machines on the network.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nmap -sn 192.168.0.0/24
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>nmap -sn 192.168.0.*
</span></code></pre></td></tr></table></div></figure>


<p>This is &ldquo;more reliable than pinging the broadcast address because many hosts
do not reply to broadcast queries&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ping 192.168.0.255
</span></code></pre></td></tr></table></div></figure>


<p>Now the arp cache should show the VM, if its running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>arp -an <span class="p">|</span> grep 8:0:27
</span><span class='line'><span class="c"># ? (192.168.0.19) at 8:0:27:d:f1:55 on en0 ifscope [ethernet]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find more information on the device by preforming an aggressive scan</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nmap -A -v 192.168.0.19
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup MySQL With a Launch Agent]]></title>
    <link href="http://dubbs.github.io/blog/2015/02/14/setup-mysql-with-a-launch-agent/"/>
    <updated>2015-02-14T12:25:36-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/02/14/setup-mysql-with-a-launch-agent</id>
    <content type="html"><![CDATA[<p>Install MySQL using brew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew update
</span><span class='line'>brew search mysql
</span><span class='line'>brew install mysql
</span></code></pre></td></tr></table></div></figure>


<p>Add a launch agent for MySQL, which runs on behalf of the current user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents
</span></code></pre></td></tr></table></div></figure>


<p>Start the launch agent now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup PHP With Apache and on the CLI]]></title>
    <link href="http://dubbs.github.io/blog/2015/02/14/setup-php-with-apache-and-on-the-cli/"/>
    <updated>2015-02-14T11:59:16-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/02/14/setup-php-with-apache-and-on-the-cli</id>
    <content type="html"><![CDATA[<p>Install PHP using brew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew update
</span><span class='line'>brew search php5
</span><span class='line'>brew install php56
</span></code></pre></td></tr></table></div></figure>


<p>Locate <code>libphp.so</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/libexec/locate.updatedb
</span><span class='line'>locate libphp5.so
</span><span class='line'><span class="c"># /usr/local/Cellar/php56/5.6.5/libexec/apache2/libphp5.so</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tell Apache which PHP shared object <code>.so</code> to use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>httpd -V <span class="p">|</span> grep ROOT
</span><span class='line'><span class="c"># -D HTTPD_ROOT=&quot;/usr&quot;</span>
</span><span class='line'>vi /etc/apache2/httpd.conf
</span><span class='line'><span class="c"># this following path is relative to /usr</span>
</span><span class='line'>LoadModule php5_module <span class="nb">local</span>/Cellar/php56/5.6.5/libexec/apache2/libphp5.so
</span></code></pre></td></tr></table></div></figure>


<p>Add PHP to your path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$(brew --prefix homebrew/php/php56)/bin:$PATH&quot;</span>
</span><span class='line'>php -v
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Snippets]]></title>
    <link href="http://dubbs.github.io/blog/2015/02/07/git-snippets/"/>
    <updated>2015-02-07T13:11:08-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/02/07/git-snippets</id>
    <content type="html"><![CDATA[<h4>Sort branches by last commit</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git <span class="k">for</span>-each-ref --sort<span class="o">=</span>-committerdate --format<span class="o">=</span><span class="s1">&#39;%(color:yellow)%(committerdate:short)%(color:reset) %(refname)&#39;</span> refs/heads refs/remotes
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulating Unix Routing Tables]]></title>
    <link href="http://dubbs.github.io/blog/2015/02/07/manipulating-unix-routing-tables/"/>
    <updated>2015-02-07T12:25:20-06:00</updated>
    <id>http://dubbs.github.io/blog/2015/02/07/manipulating-unix-routing-tables</id>
    <content type="html"><![CDATA[<p>For one of our latest projects, we needed to restrict incoming connections on the destination server prior to launching the our website.</p>

<p>So, we had our developers route their traffic through a VPN gateway by adding entries to the routing table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo route -nv add IP_DESTINATION IP_GATEWAY
</span></code></pre></td></tr></table></div></figure>


<p>You can verify the route was added by using <code>netstat</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>netstat -rn
</span><span class='line'><span class="c"># Routing tables</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Internet:</span>
</span><span class='line'><span class="c"># Destination        Gateway            Flags        Refs      Use   Netif Expire</span>
</span><span class='line'><span class="c"># IP_DESTINATION     IP_GATEWAY         UGHS            0        0     en0</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can verify the connection is going through the vpn by using <code>traceroute</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>traceroute IP_DESTINATION
</span><span class='line'><span class="c"># traceroute to IP_DESTINATION, 64 hops max, 52 byte packets</span>
</span><span class='line'><span class="c">#  1  IP_GATEWAY  1.586 ms  2.257 ms  0.885 ms</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can remove the route by using the delete option</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo route delete IP_DESTINATION
</span><span class='line'><span class="c"># delete host IP_DESTINATION</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Flush DNS]]></title>
    <link href="http://dubbs.github.io/blog/2014/12/05/how-to-flush-dns/"/>
    <updated>2014-12-05T10:59:20-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/12/05/how-to-flush-dns</id>
    <content type="html"><![CDATA[<h2>WinXP</h2>

<p>Start > Run > <code>cmd</code></p>

<pre><code>ipconfig /flushdns
</code></pre>

<h2>Win7</h2>

<p>Start > Search programs and files > <code>cmd</code> > Right click > Run as administrator</p>

<pre><code>ipconfig /flushdns
</code></pre>

<h2>Win8</h2>

<p>Start Screen > <code>cmd</code> > Right click > Run as administrator</p>

<pre><code>ipconfig /flushdns
</code></pre>

<h2>IPhone</h2>

<p>Simply toggle &ldquo;Airplane Mode&rdquo;</p>

<h2>MAC OS X 10.7+</h2>

<pre><code>sudo killall -HUP mDNSResponder
</code></pre>

<h2>MAC OS X 10.6</h2>

<pre><code>sudo dscacheutil -flushcache
</code></pre>

<h2>MAC OS X 10.5.1</h2>

<pre><code>sudo lookupd -flushcache
</code></pre>

<h2>Linux</h2>

<pre><code>sudo /etc/init.d/nscd restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSL Certificate for Localhost]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/24/ssl-certificate-for-localhost/"/>
    <updated>2014-09-24T22:22:09-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/24/ssl-certificate-for-localhost</id>
    <content type="html"><![CDATA[<p>Create a self-signed certificate and move it to the apache conf
directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># generate private key</span>
</span><span class='line'>openssl genrsa -des3 -out server.key 1024
</span><span class='line'>
</span><span class='line'><span class="c"># generate csr</span>
</span><span class='line'>openssl req -new -key server.key -out server.csr
</span><span class='line'>
</span><span class='line'><span class="c"># remove passphrase from private key</span>
</span><span class='line'>cp server.key server.key.org
</span><span class='line'>openssl rsa -in server.key.org -out server.key
</span><span class='line'>
</span><span class='line'><span class="c"># create self-signed cert </span>
</span><span class='line'>openssl x509 -req -days <span class="m">365</span> -in server.csr -signkey server.key -out server.crt
</span><span class='line'>
</span><span class='line'><span class="c"># move to apache conf dir</span>
</span><span class='line'>cp server.crt /etc/apache2/server.crt
</span><span class='line'>cp server.key /etc/apache2/server.key
</span></code></pre></td></tr></table></div></figure>


<p>Enable the default ssl configuration, <code>/etc/apache2/httpd.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># uncomment the following line</span>
</span><span class='line'>Include /private/etc/apache2/extra/httpd-ssl.conf
</span></code></pre></td></tr></table></div></figure>


<p>Add host entry for development site, <code>/etc/hosts</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>127.0.0.1 devsite.local
</span></code></pre></td></tr></table></div></figure>


<p>Modify the default virtual host entry, <code>/etc/apache2/extra/httpd-ssl.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># update config for site</span>
</span><span class='line'>DocumentRoot <span class="s2">&quot;/Library/WebServer/Documents/devsite&quot;</span>
</span><span class='line'>ServerName devsite.local:433
</span></code></pre></td></tr></table></div></figure>


<p>Restart Apache</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>


<p>(Optional) - Add as trusted certificate</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>open /etc/apache2/server.crt
</span><span class='line'>
</span><span class='line'><span class="c"># Always trust for all users</span>
</span><span class='line'><span class="c"># Always trust when using the certificate</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart Chrome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executing Drush Commands Outside of Vagrant Using Aliases]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/18/executing-drush-commands-outside-of-vagrant-using-aliases/"/>
    <updated>2014-09-18T11:17:42-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/18/executing-drush-commands-outside-of-vagrant-using-aliases</id>
    <content type="html"><![CDATA[<p>Drush aliases make it possible to run commands from outside your
vagrant box, and even outside of your project directory.</p>

<p>To start, you need a <code>~/.drush/dev.aliases.drushrc.php</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$aliases</span><span class="p">[</span><span class="s1">&#39;project1&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;root&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/vagrant&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-host&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.124&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;vagrant&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$aliases</span><span class="p">[</span><span class="s1">&#39;project2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;root&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/vagrant&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-host&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.125&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;remote-user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;vagrant&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, you need to copy your public key to your vagrant box, the password
is <code>vagrant</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-copy-id -i ~/.ssh/id_rsa.pub vagrant@10.0.0.124
</span></code></pre></td></tr></table></div></figure>


<p>And finally, test the connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drush @project1 status
</span></code></pre></td></tr></table></div></figure>


<p>Drush will use your alias configuration to select the appropriate root directory and remote
host.  You should be able to run the above command from any directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Config and Agent Forwarding]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding/"/>
    <updated>2014-09-10T21:50:59-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/10/ssh-config-and-agent-forwarding</id>
    <content type="html"><![CDATA[<p>Quick guide to setting up ssh config and agent forwarding.</p>

<h2>1. Setup remote server</h2>

<p>Enable authorized keys on remote, <code>/etc/sshd_config</code>:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile  .ssh/authorized_keys
</code></pre>

<h2>2. Setup client keys</h2>

<p>Generate an ssh key</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>Copy public key to remote server</p>

<pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub user@example.com
</code></pre>

<p>Test connection using private key</p>

<pre><code>ssh -i ~/.ssh/id_rsa user@example.com date
</code></pre>

<h2>3. Setup client config</h2>

<p>This allows for separate ssh configuration per host:</p>

<pre><code>touch ~/.ssh/config
chmod 600 ~/.ssh/config
</code></pre>

<p>Add the following to <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
HostName example.com
User user
PubkeyAuthentication yes
IdentityFile ~/.ssh/id_rsa
</code></pre>

<p>Test the connection:</p>

<pre><code>ssh remoteServer1 date
</code></pre>

<h2>4. Setup agent forwarding</h2>

<p><code>ssh-agent</code> is a user daemon which holds unencrypted ssh keys in memory.  Key
challenges are sent from a remote machine, through any intermediary servers
and back to your local machine.  This saves you from having to store your
private keys on remote servers.</p>

<p>Turn on agent forwarding for your host, <code>~/.ssh/config</code>:</p>

<pre><code>Host remoteServer1
...
ForwardAgent yes
</code></pre>

<p>Verify ssh-agent is running:</p>

<pre><code>echo "$SSH_AUTH_SOCK"
</code></pre>

<p>Verify you have an identity loaded:</p>

<pre><code>ssh-add -L
</code></pre>

<p>If not, add an identity:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<p>Login, logout, login to remote, first login requires passphrase.
Subsequent logins do not:</p>

<pre><code>ssh remoteServer1
exit
ssh remoteServer1
</code></pre>

<p>Lock your agent when you are away:</p>

<pre><code>ssh-add -x
</code></pre>

<p>Unlock your agent when you are back:</p>

<pre><code>ssh-add -X
</code></pre>

<p>Delete all keys from your agent:</p>

<pre><code>ssh-add -D
</code></pre>

<h3>Resources:</h3>

<p><a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html">http://www.unixwiz.net/techtips/ssh-agent-forwarding.html</a><br/>
<a href="https://developer.github.com/guides/using-ssh-agent-forwarding/">https://developer.github.com/guides/using-ssh-agent-forwarding/</a><br/>
<a href="http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/">http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/</a><br/>
<a href="https://kimmo.suominen.com/docs/ssh/">https://kimmo.suominen.com/docs/ssh/</a><br/>
<a href="http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html">http://blogs.perl.org/users/smylers/2011/08/ssh-productivity-tips.html</a><br/>
<a href="http://www.symantec.com/connect/articles/ssh-and-ssh-agent">http://www.symantec.com/connect/articles/ssh-and-ssh-agent</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clear the DNS Cache]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/04/clear-the-dns-cache/"/>
    <updated>2014-09-04T12:55:27-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/04/clear-the-dns-cache</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve updated <code>/etc/hosts</code> and your changes aren&rsquo;t reflected in Google Chrome.  Try clearing the DNS cache.</p>

<h2>Chrome</h2>

<p>Navigate to <code>chrome://net-internals/#dns</code> and click &ldquo;Clear Host Cache&rdquo;<br/>
Navigate to <code>chrome://net-internals/#sockets</code> and click &ldquo;Flush Socket Pools&rdquo;</p>

<h2>Mac OS X v10.6</h2>

<pre><code>sudo dscacheutil -flushcache
</code></pre>

<h2>Mac OS X v10.7+</h2>

<pre><code>sudo killall -HUP mDNSResponder
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Your Git Fork Up-to-date]]></title>
    <link href="http://dubbs.github.io/blog/2014/09/02/keeping-your-fork-up-to-date/"/>
    <updated>2014-09-02T20:42:51-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/09/02/keeping-your-fork-up-to-date</id>
    <content type="html"><![CDATA[<p>When your fork falls behind, and it will, here&rsquo;s how to quickly sync it up with master.</p>

<p>First, clone your forked repo, if you havent already:</p>

<pre><code>git clone git@github.com:&lt;fork&gt;/&lt;repo&gt;.git
cd drush
</code></pre>

<p>Then, merge upstream and push to github:</p>

<pre><code>git remote add upstream git@github.com:&lt;original&gt;/&lt;repo&gt;.git
git fetch upstream
git checkout master
git merge upstream/master
git push origin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ignorning Ri and RDoc During Gem Install]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/22/ignorning-ri-and-rdoc-during-gem-install/"/>
    <updated>2014-08-22T11:56:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/22/ignorning-ri-and-rdoc-during-gem-install</id>
    <content type="html"><![CDATA[<p>I personally never use the ri (Ruby Index) and RDoc (Ruby Documentation).</p>

<p>To prevent them from installing during <code>gem install</code>, just add this line to your ~/.gemrc or /etc/gemrc:</p>

<pre><code>gem: --no-rdoc --no-ri
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting MySQL Bin Files]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/18/deleting-mysql-bin-files/"/>
    <updated>2014-08-18T15:25:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/18/deleting-mysql-bin-files</id>
    <content type="html"><![CDATA[<p>To view your current bin files:</p>

<pre><code>$ mysql -u root -p
mysql&gt; SHOW MASTER LOGS;
</code></pre>

<p>To clear all logs but the last one:</p>

<pre><code>mysql&gt; PURGE MASTER LOGS TO 'mysql-bin.000107';
</code></pre>

<p>Open <code>my.cnf</code> and comment out the following lines to prevent logging in the future:</p>

<pre><code># log-bin=mysql-bin
</code></pre>

<p>Restart your server and confirm logging is now disabled:</p>

<pre><code>$ mysql.server restart
$ mysql -u root -p
mysql&gt; SHOW MASTER LOGS;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Non-Blocking MySQL Database Export for InnoDB Tables]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/17/non-blocking-mysql-database-export-for-innodb-tables/"/>
    <updated>2014-08-17T16:03:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/17/non-blocking-mysql-database-export-for-innodb-tables</id>
    <content type="html"><![CDATA[<p>To quickly dump a large InnoDB database to file without locking it up:</p>

<pre><code>mysqldump --single-transaction --quick -u webuser -h example.com 'dbname' &gt; dbname.sql
</code></pre>

<p>This will issue a START TRANSACTION and as long as the following commands are not
issued before your export completes, you will have a perfect snapshot:</p>

<pre><code>ALTER TABLE, CREATE TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE
</code></pre>

<p>MyISAM or MEMORY tables dumped while using this option may still change state.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Your Locate Database]]></title>
    <link href="http://dubbs.github.io/blog/2014/08/16/update-your-locate-database/"/>
    <updated>2014-08-16T16:15:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/08/16/update-your-locate-database</id>
    <content type="html"><![CDATA[<p>The <code>locate</code> command is great for searching the entire filesystem for files:</p>

<pre><code>locate my.cnf
</code></pre>

<p>Recently created files and directories might not show up, so update the index:</p>

<pre><code>locate updatedb
/usr/libexec/locate.updatedb
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Modes and Init Files]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/19/shell-modes-and-init-files/"/>
    <updated>2014-03-19T23:20:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/19/shell-modes-and-init-files</id>
    <content type="html"><![CDATA[<h2>Modes</h2>

<p>There are two main shell modes:</p>

<h3>1. Login</h3>

<p>When a user logs in with a non-graphical interface or SSH.</p>

<h3>2. Interactive</h3>

<p>When a user has a prompt and standard in/out are connected to the terminal.</p>

<h2>Combinations of Modes</h2>

<p>A shell can be initialized with the following mode combinations:</p>

<h4>Login + Interactive</h4>

<p>You will be forwarded to the users home directory, with the users
environment.</p>

<ul>
<li>log in to a remote system via SSH</li>
<li>new terminal tab, Mac OS X</li>
<li><code>sudo su -</code></li>
</ul>


<p>files sourced:</p>

<pre><code># The systemwide initialization file
/etc/profile

# The personal initialization files, first one found, in order
~/.bash_profile
~/.bash_login
~/.profile
</code></pre>

<h4>Non-login + Interactive</h4>

<p>You will stay in the current directory, but will have the users
environment.</p>

<ul>
<li>new terminal tab, linux</li>
<li>start new shell process ($ bash)</li>
<li>execute script remotely and request terminal (ssh user@host -t &lsquo;echo $PWD&rsquo;)</li>
<li><code>sudo su</code></li>
</ul>


<p>files sourced:</p>

<pre><code># The individual per-interactive-shell startup file
~/.bashrc
</code></pre>

<h4>Non-login + Non-Interactive</h4>

<p>You will stay in the current directory and keep your current
environment.</p>

<ul>
<li>run an executable with #!/usr/bin/env bash shebang</li>
<li>run a script ($ bash test.sh)</li>
<li>execute script remotely (ssh user@host &lsquo;echo $PWD&rsquo;)</li>
</ul>


<p>files sourced:</p>

<pre><code>source $BASH_ENV
</code></pre>

<p>References:</p>

<ul>
<li><a href="http://linuxcommand.org/">Linux Command</a></li>
<li><a href="https://github.com/sstephenson/rbenv/wiki/Unix-shell-initialization">Unix Shell Initialization</a></li>
<li>[Switch User] (<a href="http://askubuntu.com/questions/376199/sudo-su-vs-sudo-i-vs-sudo-bin-bash-when-does-it-matter-which-is-used">http://askubuntu.com/questions/376199/sudo-su-vs-sudo-i-vs-sudo-bin-bash-when-does-it-matter-which-is-used</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executing Shell Scripts]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/18/executing-shell-scripts/"/>
    <updated>2014-03-18T23:53:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/18/executing-shell-scripts</id>
    <content type="html"><![CDATA[<p>Here are some of the basic ways you can execute scripts on the command line.</p>

<p><code>source</code> or <code>.</code> will read and execute commands from filename in the <strong>current shell</strong> environment.<br/>
Any environment variables set within the script will remain after exit.</p>

<pre><code>. test.sh
source test.sh
</code></pre>

<p><code>sh</code> or <code>bash</code> will fork a <strong>new shell</strong> with the specified interpreter.</p>

<pre><code>sh test.sh
bash test.sh
</code></pre>

<p><code>./</code> will also fork a <strong>new shell</strong>, but the file needs to be set as executable and interpreter will be derived from the shebang (<code>#!/bin/sh</code>).</p>

<pre><code>chmod +x test.sh
./test.sh
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache and or Nginx]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/14/apache-and-or-nginx/"/>
    <updated>2014-03-14T23:54:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/14/apache-and-or-nginx</id>
    <content type="html"><![CDATA[<h2>Apache</h2>

<p>Apache was designed to process web requests in a <strong>consistent</strong> and <strong>reliable</strong> manner.</p>

<p>It uses a <strong>process-driven</strong> architecture and handles one connection per-process or per-thread.</p>

<p>Apache comes with 2 multi processing modules (MPM), which bind to ports, accept requests and spawn processes:</p>

<ol>
<li><p><strong>Prefork</strong> MPM</p>

<p> Uses multiple child processes with one thread each.
 Each process handles one connection at a time.</p></li>
<li><p><strong>Worker</strong> MPM</p>

<p> Uses multiple child processes with many threads each.
 Each thread handles one connection at a time.
 If you want to use mod_php (not thread safe), it is recommended that you also use FastCGI, so that php is running in its own memory space.</p></li>
</ol>


<p>Apache does not scale well under high server load, often consuming large amounts of RAM and CPU.</p>

<p>With Apache, it is easy to configure complex setups, it has excellent documentation and abundant module availability.</p>

<h2>Nginx</h2>

<p>Nginx was designed to solve the <a href="https://en.wikipedia.org/wiki/C10k_problem">c10k problem</a>, and as a result, is a highly performant http and reverse proxy server.</p>

<p>It uses an <strong>event-driven</strong> architecture and handles multiple connections
in a single event loop.</p>

<p>Nginx is very good at serving <em>static content</em>, which accounts for 80 - 95% of website requests.
It scales very well under high server load, and is not dependent on the underlying server hardware.</p>

<p>Compared to other more established web servers,
complex site configuration is typically more difficult with Nginx,
due to lightweight design.  It also lacking in documentation and module support.</p>

<p>Some notable sites using Nginx include:</p>

<ul>
<li>github</li>
<li>wordpress</li>
<li>pinterest</li>
<li>netflix</li>
<li>cloudflare</li>
</ul>


<h2>Both?</h2>

<p>Nginx can be used as a reverse proxy, in front of Apache, handling all
requests for static content.  All other requests are forwarded to
Apache via <code>proxypass</code>.  You will need to install mod_rpaf, so
Apache can pick up the <code>X-Real-IP</code> header provided by nginx.  This will make
it seem as though Apache handled the original request.</p>

<!--
http://www.stderr.net/apache/rpaf/
http://serverfault.com/questions/273260/when-should-i-switch-to-nginx
http://www.inetu.net/about/server-smarts-blog/january-2013/nginx-vs-apache-which-web-server-is-right-for-your
 -->

]]></content>
  </entry>
  
</feed>
