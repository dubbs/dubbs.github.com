<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Warrington]]></title>
  <link href="http://dubbs.github.io/atom.xml" rel="self"/>
  <link href="http://dubbs.github.io/"/>
  <updated>2014-03-07T16:46:40-06:00</updated>
  <id>http://dubbs.github.io/</id>
  <author>
    <name><![CDATA[Kevin Warrington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Verifying Data using Checksums]]></title>
    <link href="http://dubbs.github.io/blog/2014/03/07/verifying-data-using-checksums/"/>
    <updated>2014-03-07T16:31:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2014/03/07/verifying-data-using-checksums</id>
    <content type="html"><![CDATA[<p>Checksums are used verify data integrity and in some cases, authenticity.</p>

<p>It is especially important to run checksums on large files, such as operating systems, where 100% completeness is desired.  As file size increases, so will the possibility of errors during transmission.</p>

<p>To check a single file on Mac OS X, simply run:</p>

<pre><code>shasum -a 256 file.iso
</code></pre>

<p>To check multiple files using a SHA256SUMS file:</p>

<pre><code>cd ~/Downloads
shasum -a 256 -c 1.4.3_SHA256SUMS 2&gt;&amp;1 | grep OK
</code></pre>

<p>If the file was verified you should see:</p>

<pre><code>Vagrant-1.4.3.dmg: OK
</code></pre>

<p><a href="https://help.ubuntu.com/community/HowToSHA256SUM">HowToSHA256SUM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL server has gone away]]></title>
    <link href="http://dubbs.github.io/blog/2013/10/16/mysql-server-has-gone-away/"/>
    <updated>2013-10-16T13:17:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/10/16/mysql-server-has-gone-away</id>
    <content type="html"><![CDATA[<p>When trying to create a new mysql user, I came across the error:</p>

<pre><code>ERROR 2006 (HY000) at line 1: MySQL server has gone away
</code></pre>

<p>The fix turned out to be simple, as the documentation states, &ldquo;<a href="http://dev.mysql.com/doc/refman/5.0/en/mysql-upgrade.html">mysql_upgrade</a> should be executed each time you upgrade MySQL&rdquo;.  The following command fixed the problem.</p>

<pre><code>mysql_upgrade --password
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining files on the command line]]></title>
    <link href="http://dubbs.github.io/blog/2013/10/15/joining-files-on-the-command-line/"/>
    <updated>2013-10-15T16:00:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/10/15/joining-files-on-the-command-line</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s an extremely easy way to join files in unix.  It uses the <code>()</code> subshell operator, which waits for the enclosed command to return before passing the result to standard out.</p>

<pre><code>(cat file1 file2)&gt; file3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting between formats]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/26/converting-between-formats/"/>
    <updated>2013-09-26T13:17:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/26/converting-between-formats</id>
    <content type="html"><![CDATA[<p>There are many tools you can use to convert between file formats.</p>

<p>Convert <code>bin</code> to <code>iso</code>, with bchunk:</p>

<pre><code>brew install bchunk
bchunk input.bin input.cue output.iso
</code></pre>

<p>Convert <code>png</code> to <code>svg</code>, with convert and potrace, for simple images:</p>

<pre><code>brew install imagemagick potrace
convert file.png file.pnm
potrace file.pnm -s -o file.svg -C#ff0000 -k0.6 # red foreground, more detail
rm file.pnm
</code></pre>

<p>More to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Pipelines vs Redirection]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/25/unix-pipelines-vs-redirection/"/>
    <updated>2013-09-25T20:05:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/25/unix-pipelines-vs-redirection</id>
    <content type="html"><![CDATA[<p>Redirection is used to send data from standard streams to specific locations.</p>

<p>To send the standard output stream to a file, instead of the terminal:</p>

<pre><code>command1 &gt; outfile
command1 1&gt; outfile
</code></pre>

<p>Same as above, but instead send the standard error stream:</p>

<pre><code>command1 2&gt; outfile
</code></pre>

<p>To send standard output/error streams to a file, instead of the terminal:</p>

<pre><code>command1 &gt; outfile 2&gt;&amp;1
</code></pre>

<p>Output can also be disposed of using the null device:</p>

<pre><code>command1 &gt; /dev/null 2&gt;&amp;1
</code></pre>

<p>To use the contents of a file as the standard input stream to a command, instead of using keyboard input:</p>

<pre><code>command1 &lt; infile
</code></pre>

<p>Input can be read from one file and output to another:</p>

<pre><code>command1 &lt; infile &gt; outfile
</code></pre>

<p>The standard output of one command can also be used as the standard input to another using a temporary file:</p>

<pre><code>command1 &gt; file
command2 &lt; file
rm file
</code></pre>

<p>However, this is inefficient as the second command has to wait for the first to complete before proceeding.  Also, there is a chance that the temporary file will overwrite an already existing one.</p>

<p>Instead, it is more efficient to directly stream the output of one command into another via <code>pipes</code>:</p>

<pre><code>command1 | command2
</code></pre>

<p>Along with the standard out, you can also send standard error, notice that it appears before the pipe.</p>

<pre><code>command1 2&gt;&amp;1 | command2
</code></pre>

<p>It is also possible to direct the output of a command to standard out and an outfile using <code>tee</code>.</p>

<pre><code>command1 | tee outfile
</code></pre>

<p>Lastly, if you want to avoid overwriting files when redirecting, set noclobber:</p>

<pre><code>set -o noclobber
command1 &gt; existingfile
# -bash: existingfile: cannot overwrite existing file
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mounting an AFP Filesystem]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/23/mounting-an-afp-filesystem/"/>
    <updated>2013-09-23T13:35:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/23/mounting-an-afp-filesystem</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a simple way to connect to an Apple Filing Protocol (AFP) based server and access shared files.</p>

<pre><code>mkdir /Volumes/my-share
mount_afp "afp://192.168.0.1/folder/" /Volumes/my-share
</code></pre>

<p>You can access your new connection in either <code>/Volumes</code> or in left pane of the finder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forward vs Reverse Proxy using Apache]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/23/forward-vs-reverse-proxy-using-apache/"/>
    <updated>2013-09-23T13:09:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/23/forward-vs-reverse-proxy-using-apache</id>
    <content type="html"><![CDATA[<p>A proxy server acts as an intermediary between a client and a destination server, primarily controlling access to resources and caching content.</p>

<p>To enable proxy functionality in Apache, use the following:</p>

<pre><code># /etc/apache2/httpd.conf
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
</code></pre>

<h2>Forward Proxy</h2>

<p>A <a href="http://en.wikipedia.org/wiki/Proxy_server#Forward_proxies">Forward Proxy</a> is typically used to:</p>

<ul>
<li>hide the identities of clients</li>
<li>provide internet access to clients blocked by firewall</li>
<li>cache content to reduce network traffic</li>
</ul>


<p>A forward proxy accepts requests from internal clients and forwards them to an external resource.</p>

<p><img src="http://dubbs.github.io/images/forward-proxy.png"></p>

<p>To configure this in Apache, we can simply control who has access to external resources by
specifying their IP address.</p>

<pre><code>&lt;VirtualHost *:80&gt;
  # Enables Apache to acting as forwarding server
  ProxyRequests On

  # Adds Via header to requests
  ProxyVia On

  &lt;Proxy *&gt;
    Order deny,allow
    Deny from all

    # Only allows this client to proxy requests
    Allow from 192.168.0.11
  &lt;/Proxy&gt;
&lt;/VirtualHost&gt;
</code></pre>

<h2>Reverse Proxy</h2>

<p>A <a href="http://en.wikipedia.org/wiki/Reverse_proxy">Reverse proxy</a> is typically used to:</p>

<ul>
<li>hide the identities of servers</li>
<li>act as load balancer</li>
<li>act as web accelerator</li>
<li>used to perform A/B testing</li>
</ul>


<p>A reverse proxy accepts requests from external clients and usually forwards them
to an internal resource.</p>

<p><img src="http://dubbs.github.io/images/reverse-proxy.png"></p>

<p>To configure this in Apache, we use the <code>ProxyPass</code> and <code>ProxyPassReverse</code> directives.</p>

<pre><code>&lt;VirtualHost *:80&gt;
  # Prevents Apache from acting as forwarding server
  ProxyRequests Off

  # http://example.com/assets/css to be internally converted into a proxy request to http://cdn.example.com/css
  ProxyPass /assets/ http://cdn.example.com/

  # if http://cdn.example.com/css has a redirect to http://cdn.example.com/v2/css
  # Apache will adjust the request to http://example.com/assets/v2/css before forwarding response
  ProxyPassReverse /assets/ http://cdn.example.com/
&lt;/VirtualHost&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Querying MySQL Configuration]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/23/querying-mysql-configuration/"/>
    <updated>2013-09-23T12:40:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/23/querying-mysql-configuration</id>
    <content type="html"><![CDATA[<p>MySQL system variables can be queried using the <a href="http://dev.mysql.com/doc/refman/5.7/en/show-variables.html">show variables</a> syntax:</p>

<pre><code>mysql -uUSERNAME -pPASSWORD -e 'SHOW VARIABLES LIKE "ft_min_word_len"'
</code></pre>

<p>It&rsquo;s also useful to find out with <code>my.cnf</code> file MySQL will try to load on init:</p>

<pre><code>mysql --help | grep cnf
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving on the Command Line]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/17/moving-on-the-command-line/"/>
    <updated>2013-09-17T20:13:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/17/moving-on-the-command-line</id>
    <content type="html"><![CDATA[<p>Moving along the command line will be a breeze, if you know the following shortcuts.</p>

<p><kbd>ctrl</kbd>+<kbd>a</kbd> &ndash; move to start of line<br/>
<kbd>ctrl</kbd>+<kbd>e</kbd> &ndash; move to end of line<br/>
<kbd>alt</kbd>+<kbd>b</kbd> &ndash; move backwards a word<br/>
<kbd>alt</kbd>+<kbd>f</kbd> &ndash; move forwards a word<br/>
<kbd>alt</kbd>+<kbd>del</kbd> &ndash; remove word<br/>
<kbd>ctrl</kbd>+<kbd>k</kbd> &ndash; remove to end of line</p>

<p>On Mac, make sure you setup the following config in <code>Terminal &gt; Preferences &gt; Keyboard</code>:</p>

<ul>
<li>use option as meta key is checked</li>
<li>option cursor left is set to \033b</li>
<li>option cursor right is set to \033f</li>
</ul>


<p>where \033 = <kbd>esc</kbd></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Background Processes]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/16/working-with-background-processes/"/>
    <updated>2013-09-16T21:33:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/16/working-with-background-processes</id>
    <content type="html"><![CDATA[<p>For long running processes, rather than blocking your prompt, it&rsquo;s often useful to push commands to the background and complete other tasks.</p>

<p>To run a command in the background.</p>

<pre><code>&lt;command&gt; &amp;
</code></pre>

<p>To run a command in the background, detached from your console.  The process will not terminate on logout.  <code>nice</code> sets a lower priority.</p>

<pre><code>nohup nice &lt;command&gt; &amp;
</code></pre>

<p>List all background processes</p>

<pre><code>jobs
</code></pre>

<p>To send currently running command to background, first stop the process, <code>Ctrl-z</code>.</p>

<pre><code>bg
</code></pre>

<p>To bring a background process to the foreground</p>

<pre><code>fg
fg %1
</code></pre>

<p>To destroy a background process</p>

<pre><code>kill %1 
kill -9 %1  
kill &lt;pid&gt;
</code></pre>

<p>To receive an email notification when a background process finishes</p>

<pre><code>&lt;command&gt; | tee command.log | mailx -s 'PROCESS COMPLETE' test@example.com &amp;
</code></pre>

<p>To run a set of jobs when cpu levels permit, use batch.  <kbd>ctrl</kbd>+<kbd>d</kbd> to end input.</p>

<pre><code>user@example.com &gt; ~/.forward
batch -m
command1
command2
command3
</code></pre>

<p>You can list batch jobs and kill using the id</p>

<pre><code>at -l
at -r id
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Import/Export Progress Bar]]></title>
    <link href="http://dubbs.github.io/blog/2013/09/05/mysql-import-slash-export-progress-bar/"/>
    <updated>2013-09-05T22:05:00-06:00</updated>
    <id>http://dubbs.github.io/blog/2013/09/05/mysql-import-slash-export-progress-bar</id>
    <content type="html"><![CDATA[<p>MySQL command line progress can be monitored using the terminal-based &ldquo;Pipe Viewer&rdquo; <code>pv</code>.</p>

<h2>Import</h2>

<pre><code>pv /path/to/sqlfile.sql | mysql -uUSERNAME -pPASSWORD -D DATABASE_NAME
</code></pre>

<h2>Export</h2>

<p>We need to estimate the file size of our export to get an accurate reading.  This can be done via the information schema:</p>

<pre><code>SELECT
    Data_BB / POWER(1024,1) Data_KB,
    Data_BB / POWER(1024,2) Data_MB,
    Data_BB / POWER(1024,3) Data_GB
FROM (
    SELECT SUM(data_length) Data_BB
    FROM information_schema.tables
    WHERE table_schema IN ('DATABASE_NAME')
) A;
</code></pre>

<p>We then use the estimated size to track export progress:</p>

<pre><code>mysqldump -uUSERNAME -pPASSWORD DATABASE_NAME | pv -s 9999M &gt; DATABASE_NAME.sql 
</code></pre>

<p>Beer Break!</p>
]]></content>
  </entry>
  
</feed>
